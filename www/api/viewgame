<?php

include_once "session-start.php";
include_once "api.php";

apiPageHeader("viewgame");

?>

<p>The viewgame API lets applications retrieve IFDB's listing data for
a game, either in JSON, or in the <a href="https://babel.ifarchive.org/">Treaty of
Babel</a>'s iFiction XML format.

<h2>Identifying a game</h2>

<p>There are two main ways to identify a game for the purposes of this
API: by TUID, and by IFID.

<p>A TUID is an IFDB-specific identifier assigned when a new IFDB game
listing is created.  A TUID is unique within IFDB, and never changes
(it will always be the same as long as the listing exists).  TUIDs
generally are only meaningful within IFDB, so the most likely source
of a TUID in a client application would be another IFDB service, such
as the search API.

<p>An IFID is an identifier defined by the Treaty of Babel.  The key
thing about IFIDs is that you can generally find a game's IFID if you
have a copy of the game's story file (i.e., the byte-code file for a
virtual machine system like the Z Machine, TADS, or Hugo, or simply an
executable file for games created without VM systems).  For games
created <i>after</i> the Babel spec was created, the IFID generally
takes the form of a standard UUID, randomly generated by the authoring
system when the game is created and stored in the story file in a
format-specific manner.  Most of the major IF systems define an
algorithm for reliably extracting this UUID given a story file.
Before Babel, none of the systems had anything specifically UUID-like,
so for "legacy" games, Babel instead defines format-specific
algorithms for synthesizing a unique identifier from a story file.
Combined, these before-and-after rules cover virtually all story
files, which means that if you have a copy of a story file, you can
get an IFID.  So given a story file, you can directly look up the
game's IFDB listing data using this API.

<h2>JSON API</h2>

<p>The viewgame API is implemented as an http web service.  To
invoke the API, you construct a URL that encodes the game's identifier
(see above) and send it to IFDB with an http GET request. You must
choose whether you want to use the JSON API or the <a href="#ifiction">XML API</a> (see below).

<p><b>In new code, prefer the JSON API.</b></p>

<p>To retrieve data by TUID, use this URL:

<p>
<pre>
  https://ifdb.org/viewgame?json&amp;id=<i>TUID</i>
</pre>

<p>To retrieve data by IFID, use this URL:

<p>
<pre>
  https://ifdb.org/viewgame?json&amp;ifid=<i>IFID</i>
</pre>
</p>

<p>The output looks like this:</p>

<p>
<pre>
{
  "colophon": {
    "generator": "ifdb.org/viewgame",
    "generatorversion": 1,
    "originated": "<i>Today's date, YYYY-MM-DD</i>"
  },
  "identification": {
    "ifids": [
      "<i>Treaty of Babel IFIDs</i>"
    ],
    "format": "<i>The file format of the game, e.g. zcode or glulx. This key may be absent if we can't identify the game's format</i>"
  },
  "bibliographic": {
    "title": "<i>Title of the game</i>",
    "author": "<i>Author of the game</i>",
    "language": "<i>Language in two-letter code format, e.g. en or zh</i>",
    "firstpublished": "<i>publication date, YYYY-MM-DD</i>",
    "genre": "<i>Genre, e.g. Fantasy, Horror, Science Fiction</i>",
    "description": "<i>Description of the game (in HTML format)</i>"
  },
  "contacts": [
    "url": "<i>The official Web Site of the game, if any (this key will be absent if there's no web site)</i>"
  ],
  "ifdb": {
    "tuid": "<i>TUID</i>",
    "pageversion": <i>The version number of the page</i>,
    "link": "<i>URL to game's main listing page</i>",
    "coverart": {
      "url": "<i>URL to cover art</i>"
    },
    "playTimeInMinutes": <i>Estimated play time in minutes</i>

    "downloads": {
      "links": [
        {
          "url": "<i>URL to the file</i>",
          "title": "<i>Title of the file</i>",
          "desc": "<i>Description of the file</i>",
          "isGame": <i>true if this link points to a playable version of the game, such as a story file or an executable application; false otherwise</i>,
          "format": "<i>The file's format, from the <a href="/fileformat">File Format</a> page</i>"
        }
      ]
    },
    "averageRating": <i>Raw "star" rating average</i>,
    "starRating": <i>Rounded "star" rating average, for display</i>,
    "ratingCountAvg": <i>Number of ratings in the average (note that reviews can choose to "omit" their ratings from the average)</i>,
    "ratingCountTot": <i>Total number of ratings</i>,
    "tags": [
      {
         "name": <i>Text of the tag</i>,
         "tagcnt": <i>Number of users who have used the tag on the current game</i>,
         "gamecnt": <i>How many games have used the tag</i>
      }
    ]
  }
}
</pre>
</p>

<p><code>averageRating</code> provides the average IFDB member rating
as a decimal floating-point number, such as "3.575".  This is a simple
arithmetic average of the ratings for the game entered by IFDB users;
each user rating is simply an integer from 1 to 5.  <code>starRating</code>
provides the average value rounded to the nearest half-star,
which is what IFDB usually displays on its own generated pages.  IFDB
usually uses a graphic image showing the number of stars in the
average, and it only has an image for each half-star increment, so it
has to round for this kind of display.  It'd be easy enough for client
code to do the rounding itself, but the API provides the rounded value
anyway because this eliminates any guesswork about the exact rounding
rules for boundary cases, ensuring that a client can always display
the same rounded value IFDB itself does.

<p><code>ratingCountAvg</code> and <code>ratingCountTot</code> provide the number
of ratings that went into the average, and the total number of ratings
for the game, respectively.  The reason these are stated separately is
that a user can opt to omit their rating for a given game from the
game's average.  If a user exercises this option, the rating will be
recorded but won't be used to compute the average.  This means that
the ratingCountTot value is always equal to or greater than the
ratingCountAvg value.

<p><code>tagcnt</code> shows how many users have used that tag on the
currently selected game. (Normally, <code>tagcnt</code> will be 1,
because it's unusual for a player to add a tag when the game already has that
tag.) <code>gamecnt</code> shows how many games have used that tag.
<code>gamecnt</code> is the number that appears in parentheses next to each
tag on the game listing page.

<h2 id="ifiction">iFiction XML API</h2>

In this API, IFDB
replies with an XML content body containing an extended iFiction
record.  By extended, we mean that the record contains the standard
iFiction elements, plus some custom IFDB-specific extensions.

<p>To retrieve data by TUID, use this URL:

<p><pre>
  https://ifdb.org/viewgame?ifiction&amp;id=<i>TUID</i>
</pre>

<p>To retrieve data by IFID, use this URL:

<p><pre>
  https://ifdb.org/viewgame?ifiction&amp;ifid=<i>IFID</i>
</pre>

<h2>True iFiction records vs. IFDB data</h2>

<p>It's important to understand that the XML file returned from the
viewgame API is in the <i>form</i> of an iFiction record, but it's not
the "true" iFiction record for the game.

<p>The true iFiction record for a game is the one provided by the
game's author, or by an archivist or other authoritative third party
if the author hasn't provided one.  The iFiction returned from the
viewgame API, in contrast, is a copy of the IFDB listing data for the
game, formatted as an iFiction record.  IFDB doesn't store the
official iFiction for a game anywhere, and it doesn't have any
automatic way to synchronize its data with the official iFiction
record for a game.  On the contrary, IFDB listings are editable by all
IFDB members, Wiki-style, so a listing might have information beyond
or different from what the author would have entered.  The contents
might therefore diverge from the official iFiction data provided by
the author.

<p>For post-Babel games, the author's official iFiction record can be
embedded directly in the story file.  If you retrieve an iFiction
record for a game from IFDB, and compare it to the iFiction record
embedded in the game's story file, you might well find differences.
This isn't an error; it simply reflects the different origins
of the respective records.

<h2>Reply format</h2>

<p>On error, the reply has this structure:

<p><pre>
   &lt;viewgame xmlns="http://ifdb.org/api/xmlns"&gt;
     &lt;errorCode&gt;<i>code</i>&lt;/errorCode&gt;
     &lt;errorMessage&gt;<i>Error message text</i>&lt;/errorMessage&gt;
   &lt;/viewgame&gt;
</pre>

<p>The error code is a string indicating the specific type of error
that occurred:

<ul>
   <li><b>badRequest</b>: invalid request format (usually, this means
                          that no TUID or IFID was specified)
   <li><b>notFound</b>: the specified game isn't in the database
   <li><b>versionNotFound</b>: the requested listing version doesn't exist
   <li><b>dbError</b>: a database error occurred on the server
</ul>

<p>The error message text is a human-readable error message. This is
the message that the regular game listing page viewer would have
displayed for the same error condition, which might or might not be
suitable for display in your application.

<p>On success, the reply is in the form of a Babel iFiction record.
The following fields are included, to the extent the corresponding
data are present in the listing:

<ul>
   <li>identification
   <ul>
      <li>ifid
      <li>bafn
      <li>format
   </ul>
   <li>bibliographic
   <ul>
      <li>title
      <li>author
      <li>language
      <li>firstpublished
      <li>genre
      <li>description
      <li>series
      <li>seriesnumber
      <li>forgiveness
   </ul>
   <li>contact
   <ul>
      <li>url
   </ul>
</ul>

<p>In addition, the following IFDB extensions are included.  The
extensions are all grouped under a single &lt;ifdb&gt; tag that
appears at the same XML nesting level as &lt;identification&gt;,
&lt;bibliographic&gt;, etc (that is, as a direct child of the
&lt;story&gt; element).  The structure is as follows:

<p><pre>
   &lt;ifdb xmlns="http://ifdb.org/api/xmlns"&gt;
     &lt;tuid&gt;<i>TUID</i>&lt;/tuid&gt;
     &lt;link&gt;<i>URL to game page</i>&lt;/link&gt;
     &lt;coverart&gt;
       &lt;url&gt;<i>URL to cover art image</i>&lt;/url&gt;
     &lt;/coverart&gt;
     &lt;averageRating&gt;<i>Average user rating</i>&lt;/averageRating&gt;
     &lt;starRating&gt;<i>Star rating</i>&lt;/starRating&gt;
     &lt;ratingCountAvg&gt;<i>Number of ratings included in the average</i>&lt;/ratingCountAvg&gt;
     &lt;ratingCountTot&gt;<i>Total number of ratings</i>&lt;/ratingCountTot&gt;
     &lt;tags&gt;
       &lt;tag&gt;
         &lt;name&gt;<i>Text of the tag</i>&lt;/name&gt;
         &lt;tagcnt&gt;<i>Number of users who have used the tag on the current game</i>&lt;/tagcnt&gt;
         &lt;gamecnt&gt;<i>How many games have used the tag</i>&lt;/gamecnt&gt;
       &lt;/tag&gt;
     &lt;/tags&gt;
   &lt;/ifdb&gt;
</pre>

<p>The TUID is the game's IFDB internal identifier (see above).

<p>The link element gives the URL to the main IFDB listing page for
the game.

<p>The coverart element is included only if the IFDB listing include a
cover art image; if so, the url element gives an http URL to the
image.  This URL yields an image file (JPEG, GIF, or PNG) containing
the full-size cover art image for the game.  You can retrieve a
thumbnail of this image by appending <tt>&amp;thumbnail=WxH</tt> to
the URL, where W and H are the desired width and height, in pixels, of
the thumbnail.  The server preserves the original aspect ratio of the
image by treating the given dimensions as a bounding rectangle, and
shrinking the image to fit these bounds.

<p>The averageRating element provides the average IFDB member rating
as a decimal floating-point number, such as "3.575".  This is a simple
arithmetic average of the ratings for the game entered by IFDB users;
each user rating is simply an integer from 1 to 5.  The starRating
element provides the average value rounded to the nearest half-star,
which is what IFDB usually displays on its own generated pages.  IFDB
usually uses a graphic image showing the number of stars in the
average, and it only has an image for each half-star increment, so it
has to round for this kind of display.  It'd be easy enough for client
code to do the rounding itself, but the API provides the rounded value
anyway because this eliminates any guesswork about the exact rounding
rules for boundary cases, ensuring that a client can always display
the same rounded value IFDB itself does.

<p>The ratingCountAvg and ratingCountTot elements provide the number
of ratings that went into the average, and the total number of ratings
for the game, respectively.  The reason these are stated separately is
that a user can opt to exclude her rating for a given game from the
game's average.  If a user exercises this option, the rating will be
recorded but won't be used to compute the average.  This means that
the ratingCountTot value is always equal to or greater than the
ratingCountAvg value.

<p>The returned iFiction record also includes the colophon element,
which identifies how the record was generated.  For the purposes of
the colophon, the API identifies itself with the generator name
"ifdb.org/viewgame".

<?php

apiPageFooter();

?>
