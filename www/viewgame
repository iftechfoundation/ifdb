<?php

include_once "session-start.php";

// make sure we process any persistent login state
include_once "login-persist.php";
$curuser = checkPersistentLogin();

include_once "pagetpl.php";
include_once "util.php";
include "starctl.php";
include_once "rss.php";
include_once "game-rss.php";
include_once "gameinfo.php";
include_once "commentutil.php";
include_once "news.php";

$db = dbConnect();
$curuser = checkPersistentLogin();

// check the user for ADMIN privileges and sandbox setting
$userprivs = $adminPriv = false;
$mysandbox = 0;
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select `privileges`, `sandbox` from users where id=?", [$curuser]);
    list($userprivs, $mysandbox) = mysql_fetch_row($result);
    $adminPriv = (strpos($userprivs, "A") !== false);
}

$errMsg = false;
$errCode = false;
$title = "Game Details";
$detailView = false;
$recView = false;
$historyView = false;
$reviewView = false;
$ratingsView = false;
$oneReviewView = false;
$downloadsView = false;
$myCrossRecs = 0;

// note if we're on IE6
$userAgent = $_SERVER['HTTP_USER_AGENT'];
$ie6 = preg_match("/; msie 6\./i", $userAgent);

// Zero-Width Space: for IE6, use &shy;, otherwise use &#8203;.  (The latter
// is the unicode zero-width space character, which allows a line break but
// is otherwise invisible.  &shy; is the soft hyphen, which is invisible most
// of the time but allows a line break, and is rendered as a hyphen if the
// renderer does elect to put a line break there.  IE6 doesn't handle the
// unicode zwsp; the other browsers, including IE7, do.)
$zwsp = ($ie6 ? "&shy;" : "&#8203;");

if (isset($_REQUEST['cssOverride']))
    $cssOverride = get_req_data('cssOverride');

// connect to the database
include_once "dbconnect.php";
$db = dbConnect();

// retrieve the special reviewer names
include_once "reviews.php";
$specialNames = initSpecialNames($db);

// cache the IF Archive mirror mapping, if any
include "mirrorUrl.php";

// presume the default layout preferences: show off-site reviews with
// summaries in the Editorial Review section
$offsiteMode = 'A';

// if we're logged in, get the user's miscellaneous layout preferences
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select offsite_display from users where id = ?", [$curuser]);
    if (mysql_num_rows($result) != 0)
        list($offsiteMode) = mysql_fetch_row($result);

    // if it's not set, default to 'A'
    if (strlen($offsiteMode) != 1 || strpos("ABLN", $offsiteMode) === false)
        $offsiteMode = 'A';
}

// ------------------------------------------------------------------------
// get a footnote indicator for the given footnote number
//
function getFootnoteStar($num)
{
    $f = array("*", "&dagger;", "&Dagger;");
    if ($num <= 0)
        return "";
    else if ($num <= count($f))
        return $f[$num-1];
    else
        return str_repeat("*", 2 + $num - count($f));
}

// ------------------------------------------------------------------------
// get the game ID - it can be given as an IFID via ?ifid=xxx, or as an
// internal ID via ?id=xxx
function getID() {
    global $db, $errMsg, $errCode;

    $id = false;
    if (isset($_REQUEST['ifid'])) {
        // We have an IFID - look up our corresponding internal ID.  Note
        // that letters in IFIDs are always upper-case; we store them in
        // the database this way, so capitalize the request string before
        // looking it up.
        $qifid = strtoupper($_REQUEST['ifid']);
        $result = mysqli_execute_query($db, "select gameid from ifids
            where ifid = ?", [$qifid]);

        // make sure we found a match
        if (mysql_num_rows($result) == 0) {
            $errMsg = "No game was found matching the requested IFID.";
            $errCode = "notFound";
            return null;
        }

        // get the ID from the record
        $id = mysql_result($result, 0, "gameid");
    } else if (isset($_REQUEST['id'])) {
        // there's no IFID, so use the internal ID number
        $id = $_REQUEST['id'];
    }

    // return the ID we found
    return $id;
}

// --------------------------------------------------------------------------
function sendCoverArt()
{
    global $errMsg, $db;

    if (localImageCredentials() === null) {
        header("HTTP/1.1 302 Found");
        header("Location: https://" . PRODUCTION_SERVER_NAME . $_SERVER['REQUEST_URI']);
        exit();
    }

    // get the ID
    $id = getID();
    if (is_null($id))
        exit($errMsg);

    // look up the game
    $result = mysqli_execute_query($db,
        "select coverart, title, pagevsn from games where id = ?", [$id]);
    if (mysql_num_rows($result) == 0) {
        checkRedirect($id);
        exit("No game record found for ID");
    }

    // retrieve the image
    list($imgname, $title, $pagevsn) = mysql_fetch_row($result);

    if (isset($_REQUEST['version'])) {
        header("Cache-Control: public, max-age=31536000, immutable");
    }

    // get the target version from the request
    $targVsn = (isset($_REQUEST['version'])
                && (int)$pagevsn != (int)($_REQUEST['version']))
               ? (int)($_REQUEST['version']) : false;

    // if we're retrieving an old version, go back and find it
    if ($targVsn) {
        // query up the old versions from newest to oldest
        $result = mysqli_execute_query($db,
            "select pagevsn, deltas
            from games_history
            where id = ?
            order by pagevsn desc", [$id]);

        // scan for a version that overrides the current definition
        $rows = mysql_num_rows($result);
        $foundvsn = false;
        while ($rec = mysql_fetch_array($result, MYSQL_ASSOC)) {

            // deserialize the deltas
            $deltas = unserialize($rec['deltas']);

            // if this entry defines artwork, use the override
            if (isset($deltas['coverart']))
                $imgname = $deltas['coverart'];

            if (isset($deltas['title']))
                $title = $deltas['title'];

            // stop if this is the version we're looking for
            if ((int)$rec['pagevsn'] == $targVsn)
            {
                $foundvsn = true;
                break;
            }
        }

        // if we didn't find the requested version, give up
        if (!$foundvsn)
            exit("The requested version of the art image wasn't found");
    }

    // generate the ldesc page if applicable
    if (isset($_REQUEST['ldesc']))
        sendImageLdesc("Cover Art for $title"
                       . ($targVsn ? " (version $targVsn)" : ""),
                       $imgname);

    // retrieve the image data
    list($imgdata, $fmt) = fetch_image($imgname, true);

    // get the thumbnail setting
    $thumbnail = (isset($_REQUEST['thumbnail'])
                  ? $_REQUEST['thumbnail'] : null);

    // send it
    sendImage($imgdata, $fmt, $thumbnail);
}

// --------------------------------------------------------------------------
// display the Member Review section header
//
function showMemberReviewsHeader($showHisto)
{
    global $memberReviewCnt, $ratingsView, $reviewView, $oneReviewView, $ratingAvg, $ratingCntAvg, $ratingHisto, $id, $currentUserReview, $curuser;

    $heading = "Ratings and Reviews";
    if ($ratingsView) {
        $heading = "All Member Ratings";
    } else if ($reviewView) {
        $heading = "All Written Member Reviews";
    } else if ($oneReviewView) {
        $heading = "Review";
    }

    // start the section
    echo "<a name='memberReviews'></a>"
        . "<h2>$heading</h2><div class=indented>";

    // count the ratings in the histogram, and get the maximum
    for ($cnt = $max = 0, $i = 1 ; $i <= 5 ; $i++) {
        $cur = $ratingHisto[$i];
        $cnt += $cur;
        if ($cur > $max)
            $max = $cur;
    }

    // show the histogram if desired
    if ($showHisto && $cnt > 1) {
        global $nonce;
        echo "<style nonce='$nonce'>\n"
            . ".viewgame__histogramEnd { padding-left: 2em; }\n"
            . "</style>\n";
        echo "<table border=0 cellspacing=0 cellpadding=0><tr valign=top>"
            . "<td valign=top>"
            . "<table class=ratingHistogram border=0 cellspacing=0 cellpadding=0>";

        // show the histogram
        for ($i = 5 ; $i >= 1 ; $i--) {
            $num = $ratingHisto[$i];
            $pct = (int)($num*100 / $max);
            echo "<tr><td>$i&nbsp;star:</td>"
                . "<td><div class=ratingHistoBox>"
                . "<div class='ratingHistoBar ratingHistoBar$i'>"
                . "<style nonce='$nonce'>\n"
                . ".ratingHistoBar$i { width: $pct%; }\n"
                . "</style>\n"
                . "</div></div></td>"
                . "<td align=right>($num)</td></tr>";
        }

        echo "</table></td><td class=\"viewgame__histogramEnd\" valign=top>";
        echo "<div class=details>Average Rating: "
            . showStars($ratingAvg)
            . " based on $ratingCntAvg ratings<br>"
            . "Number of Reviews Written by IFDB Members: $memberReviewCnt<br></div>";
    }

    if ($currentUserReview || !$oneReviewView) {
        echo "<div class=details><a href=\"review?id=$id&userid=$curuser\">"
            . ($currentUserReview ? "Revise your review" : "Write a review")
            . "</a>"
            . "</div>";
    }

    // finish the histogram table if applicable
    if ($showHisto) {
        echo "</td></tr></table>";
    }
}

// ------------------------------------------------------------------------
// Convert a list of (place, division) names to a printable award list.
// We'll make the list into a semicolon-separated list of "place, division"
// items.  The "Main" division has special handling: if it's the only
// award, we omit any mention of the division at all, otherwise we call
// it "Overall".
function awardList($awards)
{
    // check for a "main" division
    $names = [];
    foreach ($awards as $a)
    {
        if ($a[1] == "Main")
        {
            // if this is the only item, leave out the division name
            // entirely, since it's just the place in the overall
            // competition; otherwise explicitly call it the "Overall"
            // division
            if (count($awards) == 1)
                $names[] = $a[0];
            else
                $names[] = "{$a[0]} overall";
        }
        else
        {
            // make the name: "Place, Division"
            $names[] = "{$a[0]}, {$a[1]}";
        }
    }

    // return the semicolon-separated list
    return implode("; ", $names);
}

// ----------------------- COVER ART HANDLING ------------------------
//
// if we're being asked for a cover art image, send that instead of
// serving up the game page
if (isset($_REQUEST['coverart'])) {
    // send the image
    sendCoverArt();

    // we only wanted the cover art image, so we're done now
    exit();
}

// initialize - this fetches the database record for the game we're
// being asked to display
function init()
{
    global $db, $id, $qid, $errMsg, $errCode;

    // make sure we're connected
    if ($db == false) {
        $errMsg = "An error occurred connecting to the game database. Please
          try refreshing the page. If the error persists,
          <a href=\"/contact\">contact us</a> to let us know about
          the problem.";
        $errCode = "dbError";
        return;
    }

    // check the game ID
    $id = getID();
    if (!$id) {
        if (!$errMsg) {
            $errMsg = "No game was specified in the request.";
            $errCode = "badRequest";
        }
        return;
    }

    // get the quoted ID
    $qid = mysql_real_escape_string($id, $db);
}
init();

// load the game information
$reqVersion = $_REQUEST['version'] ?? null;
if (!$errMsg) {
    list($ifids, $title, $author, $authorExt,
         $pubYear, $pubFull, $license,
         $system, $desc, $rawDesc,
         $hasart, $genre, $seriesname, $seriesnum,
         $forgiveness, $bafsid, $version,
         $language, $languageNameOnly,
         $website, $links,
         $ratingCntAvg, $ratingCntTot, $ratingAvg, $memberReviewCnt,
         $currentUserRating, $currentUserReview,
         $editedbyid, $editedbyname, $moddate, $moddate2, $pagevsn,
         $moddatelatest,
         $historyView,
         $dlnotes, $extReviews, $extRevDisplayRank,
         $ratingHisto, $xrefs, $inrefs, $flags) =
             getGameInfo($db, $id, $curuser, $reqVersion, $errMsg, $errCode);
    $title = htmlspecialchars($title);
    $license = htmlspecialchars($license);
    $language = htmlspecialchars($language);
    $seriesnum = htmlspecialchars($seriesnum);
    $forgiveness = htmlspecialchars($forgiveness);

    $should_hide = ($flags & FLAG_SHOULD_HIDE);

}

// check for an explicit redirect from this TUID to another TUID
function checkRedirect($id)
{
    global $db;
    $result = mysqli_execute_query($db,
        "select fwdgameid from gamefwds where gameid = ?", [$id]);
    if (mysql_num_rows($result) > 0)
    {
        // get the target game
        list($toID) = mysql_fetch_row($result);

        // build the redirect string with all of the original URL parameters
        $redir = "viewgame?id=$toID";
        foreach ($_GET as $key => $val) {
            if (strcasecmp($key, "id") != 0) {
                $val = urlencode(get_req_data($key));
                $redir .= "&$key" . ($val ? "=$val" : "");
            }
        }

        header("HTTP/1.1 301 Moved Permanently");
        header("Content-Type: text/html");
        header("Location: $redir");

        echo "The listing you requested was a duplicate. Your browser should "
            . "automatically take you to the original in a moment. "
            . "(<a href=\"$redir\">Click here</a> if your "
            . "browser doesn't load the new page automatically.)";

        exit();
    }
}

if ($errCode == "notFound") {
    checkRedirect($id);
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "versionNotFound") {
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "dbError") {
    header("HTTP/1.1 500 Internal Server Error");
} else if ($errCode == "badRequest") {
    header("HTTP/1.1 400 Bad Request");
}

// Member review query - this selects REVIEWS (not just ratings, so
// the 'review' field can't be null), BY MEMBERS (i.e., not special
// reviews, so 'special' must be null).
$selectMemberReviews = getReviewQueryByGame(
    $db, $id, "reviews.review is not null and reviews.special is null");

// Rating query - this selects RATINGS (so the 'rating' field must
// not be null), BY MEMBERS (i.e., not special
// reviews, so 'special' must be null), excluding "omitted" reviews
// ("omit this review from the average", rflags 2)
// We'll also include reviews in this list, so it's
// okay for the review field to be non-null.  If we wanted ONLY
// ratings and not any reviews, we'd also require 'review is null'.
$selectMemberRatings = getReviewQueryByGame(
    $db, $id, "reviews.rating is not null and reviews.special is null " .
        "and not(ifnull(`ifdb`.`reviews`.`RFlags`, 0) & 2)"
);


// --------------------Finding the median play time--------------------------

// Find the median of the numbers in an array
function findMedian($array_input) {
    if (!is_array($array_input)) return false;
    if (!$array_input) return 0;
    // Sort the entries in the array
    sort($array_input);
    // Divide the number of entries by two
    $total_entries = count($array_input);
    $half = $total_entries / 2;
    $int_half = (int) $half;                   // Find just the integer part of a number, in case it's not a whole number

    // Calculate median
    if ($total_entries % 2 != 0) {             // Dividing by 2 gives a remainder, so the array must have an odd number of entries
        $median = $array_input[$int_half];     // Choose the middle entry
    } else {                                   // The array has an even number of entries, so there will be two middle entries
        $middle1 = $array_input[$int_half-1];  // Find the first middle entry
        $middle2 = $array_input[$int_half];    // Find the second middle entry
        $median = ($middle1 + $middle2) / 2;
    }
    return $median;
}


// Get all of the estimated play times for this game, and put them in an array
$result = mysqli_execute_query($db, "select playertimes.id as player_time_id, time_in_minutes, time_note, userid, name from playertimes inner join users on playertimes.userid = users.id where gameid = ?", [$id]);
if (!$result) throw new Exception("Error: " . mysqli_error($db));
$alltimes = mysqli_fetch_all($result, MYSQLI_ASSOC);

// Find the median play time (in minutes) for this game
$mediantime = findMedian(array_map(fn($row) => $row['time_in_minutes'], $alltimes));

// When we display the official estimated time for a game, we want to round to the 
// nearest 5 minutes when the game is longer than 1 hour.
$rounded_median_time = 0;
if ($mediantime > 60) {
    // The game is over an hour, so round to the nearest 5 minutes. 
    $rounded_median_time =  round( $mediantime / 5 ) * 5;
} else {
    // The game is an hour or less, so round to the nearest minute.
    $rounded_median_time = round($mediantime);
}

//----------------End finding median play time------------------

// User filter ordering - if we're logged in, sort by any user filter
// (promotions and demotions) in effect.
$orderByUserFilter = 'null';
if ($curuser) {
    $orderByUserFilter = "(case ifnull(userfilters.filtertype, '*') "
                         . "when 'P' then 1 "
                         . "when 'D' then 3 "
                         . "else 2 end)";
}

// check for an RSS feed request
if (!$errMsg && isset($_REQUEST['rss'])) {

    // get the feed type
    if (isset($_REQUEST['reviews']))
        $feedType = GAME_RSS_REVIEWS;
    else if (isset($_REQUEST['downloads']))
        $feedType = GAME_RSS_DLS;
    else
        $feedType = GAME_RSS_ALL;

    // get the RSS item list
    $items = getGameRssItems($db, $id, $feedType, $title, $links, false);

    // send it
    if ($feedType == GAME_RSS_ALL) {
        sendRSS("$title - IFDB Updates",
                get_root_url() . "viewgame?id=$id",
                "Updates to <i>$title</i>'s IFDB page",
                $items, 50);
    } else if ($feedType == GAME_RSS_DLS) {
        sendRSS("$title - File Updates on IFDB",
                get_root_url() . "viewgame?id=$id",
                "IFDB File Updates for <i>$title</i>",
                $items, 50);
    } else if ($feedType == GAME_RSS_REVIEWS) {
        sendRSS("$title - IFDB Reviews",
                get_root_url() . "viewgame?id=$id&reviews",
                "IFDB Member Reviews of <i>$title</i>",
                $items, 50);
    }

    // done
    exit();
}

$json = isset($_REQUEST['json']);
if (isset($_REQUEST['ifiction']) || $json)
{
    if (!$json) {
        header("Content-Type: text/xml");
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Cache-Control: no-store, no-cache, must-revalidate");
    }

    // if an error occurred, show the error
    if ($errMsg) {
        $error_fields = [
            'errorCode' => $errCode,
            'errorMessage' => $errMsg,
        ];
        if ($json) {
            send_json_response($error_fields);
        } else {
            echo "<viewgame xmlns=\"http://ifdb.org/api/xmlns\">";
            echo serialize_xml($error_fields);
            echo "</viewgame>";
        }
        exit();
    }

    $identification = [];
    $bibliographic = [];
    $contacts = [];
    $ifdb_section = [];

    $story_obj = [
        'colophon' => [
            'generator' => 'ifdb.org/viewgame',
            'generatorversion' => 1,
            'originated' => date('Y-m-d', strtotime($moddate2)),
        ],
        'identification' => &$identification,
        'bibliographic' => &$bibliographic,
        'contacts' => &$contacts,
    ];

    if ($json) {
        $identification['ifids'] = $ifids;
        if ($bafsid)
            $identification['bafn'] = $bafsid;

        $story_obj['ifdb'] = &$ifdb_section;
    } else {
        foreach($ifids as $i)
            $identification[] = ['ifid' => $i];
        if ($bafsid)
            $identification[] = ['bafn' => $bafsid];

        $story_obj['ifdb'] = [
            '_attrs' => ['xmlns' => 'http://ifdb.org/api/xmlns'],
            '_contents' => &$ifdb_section,
        ];
    }

    // Figure the format.  This is actually a bit tricky, since we keep
    // different data from babel on this count.  First, try basing this
    // on the development system ID, since many development systems map
    // to specific output formats.
    $formatMap = [
        "TADS 2" => "tads2",
        "TADS 3" => "tads3",
        "Hugo" => "hugo",
        "AGT" => "agt",
        "Alan 2" => "alan2",
        "Alan 3" => "alan3",
        "ADRIFT" => "adrift",
        "AdvSys" => "advsys",
        "Level 9" => "level9",
        "Magnetic Scrolls" => "magscrolls"
    ];
    $format = false;
    if (isset($formatMap[$system])) {
        $format = $formatMap[$system];
    }

    // If that didn't work, scan the download links.  Check the format ID
    // for each link: most of our story file formats map to babel formats.
    // So, if we can find a story file among the downloads, we'll know the
    // babel format.
    if (!$format) {
        $linkTypeMap = [
            "tads2" => "tads2",
            "tads3" => "tads3",
            "zcode" => "zcode",
            "blorb/zcode" => "zcode",
            "glulx" => "glulx",
            "blorb/glulx" => "glulx",
            "hugo" => "hugo",
            "alan2" => "alan2",
            "alan3" => "alan3",
            "agt" => "agt",
            "adrift" => "adrift",
            "advsys" => "advsys",
            "executable" => "executable"
        ];

        foreach ($links as $l) {
            $xid = $l['fmtexternid'];
            if (isset($linkTypeMap[$xid])) {
                $format = $linkTypeMap[$xid];
                break;
            }
        }
    }

    if ($format) {
        if ($json) {
            $identification['format'] = $format;
        } else {
            $identification[] = ['format' => $format];
        }
    }

    $bibliographic['title'] = $title;
    $bibliographic['author'] = $author;

    // Pull out the language code from the language string, which
    // we've formatted as something like "English (en-US)".  If there
    // are no parens, we must not have found a name for the language,
    // so the whole language string is the identifier.
    if (preg_match("/\(([-a-z]+)\)$/i", $language, $match))
        $language = $match[1];
    if ($language)
        $bibliographic['language'] = $language;

    $firstpublished = $pubFull ? date("Y-m-d", strtotime($pubFull)) : $pubYear;
    if ($firstpublished)
        $bibliographic['firstpublished'] = $firstpublished;

    if ($genre)
        $bibliographic['genre'] = $genre;

    $desc = fixDesc($rawDesc, $json ? 0 : FixDescIfic);
    if ($desc)
        $bibliographic['description'] = $desc;

    if ($website)
        $contacts['url'] = $website;

    $ifdb_section['tuid'] = $id;
    $ifdb_section['pageversion'] = $pagevsn;
    $ifdb_section['link'] = get_root_url() . "viewgame?id=$id";
    if ($hasart) {
        $ifdb_section['coverart'] = [
            'url' => get_root_url() . "coverart?id=$id&version=$pagevsn",
        ];
    }

    if ($rounded_median_time >= 1) {
        if ($json) {
            $ifdb_section['playTimeInMinutes'] = $rounded_median_time;
        } else {
            $ifdb_section[] = ['playTimeInMinutes' => $rounded_median_time];
        }
     }

    if ($links) {
        // load the translation table for the file formats
        $result = mysqli_execute_query($db,
            "select id, externid from filetypes");
        $fmtMap = [];
        while ([$id, $ext] = mysql_fetch_row($result)) {
            $fmtMap[$id] = $ext;
        }
        $links_section = [];
        $ifdb_section['downloads'] = ['links' => &$links_section];
        foreach ($links as $l) {
            $link_obj = [
                'url' => $l['url'],
            ];
            if ($l['title']) $link_obj['title'] = $l['title'];
            if ($l['desc']) $link_obj['desc'] = $l['desc'];
            if ($l['isgame']) $link_obj['isGame'] = true;
            if ($l['fmtexternid']) $link_obj['format'] = $l['fmtexternid'];
            if (isset($l['osext'])) {
                if (isset($l['osvsn'])) {
                    $link_obj['os'] = $l['osext'] . "." . $l['osvsnext'];
                } else {
                    $link_obj['os'] = $l['osext'] . ".";
                }
            }
            if ($l['compression']) $link_obj['compression'] = $fmtMap[$l['compression']];
            if ($l['compressedprimary']) $link_obj['compressedPrimary'] = $l['compressedprimary'];

            if ($json) {
                $links_section[] = $link_obj;
            } else {
                $links_section[] = ['link' => $link_obj];
            }
        }
    }
    if (!$should_hide) {
        $ifdb_section['averageRating'] = $ratingAvg;
        [$stars] = roundStars($ratingAvg);
        if ($stars) {
            $ifdb_section['starRating'] = $stars;
        }
        $ifdb_section['ratingCountAvg'] = $ratingCntAvg;
        $ifdb_section['ratingCountTot'] = $ratingCntTot;
    }

    $result = mysqli_execute_query($db,
        "select
           tag,
           cast(sum(gameid = ?) as int) as tagcnt,
           count(distinct gameid) as gamecnt
         from gametags
         where tag in (select tag from gametags where gameid = ?)
         group by tag", [$ifdb_section['tuid'], $ifdb_section['tuid']]);

    $tagInfo = [];
    while ([$tag, $tagCnt, $gameCnt] = mysql_fetch_row($result)) {
        $tagInfo[] = [
            'name' => $tag,
            'tagcnt' => $tagCnt,
            'gamecnt' => $gameCnt,
        ];
    }

    if ($json) {
        $ifdb_section['tags'] = $tagInfo;
    } else {
        $ifdb_section['tags'] = array_map(function ($tag) { return ['tag' => $tag]; }, $tagInfo);
    }

    if ($json) {
        send_json_response($story_obj);
    } else {
        echo "<ifindex version=\"1.0\" "
            .    "xmlns=\"http://babel.ifarchive.org/protocol/iFiction/\">";
        echo serialize_xml(['story' => $story_obj]);
        echo '</ifindex>';
    }
    exit();
}

// start the page
$extraHead = scriptSrc('/viewgame.js', true);
if ($should_hide) {
    $extraHead .= "<meta name=\"robots\" content=\"noindex\">";
}

if (!$errCode) {
    // add Open Graph elements
    $extraHead .= "<meta property=\"og:site_name\" content=\"IFDB\" />";
    $extraHead .= "<meta property=\"og:type\" content=\"website\" />";
    $extraHead .= "<meta property=\"og:url\" content=\"";
    $extraHead .= get_root_url() . "viewgame?id=$id\" />";
    $extraHead .= "<meta property=\"og:title\" content=\"".strip_tags($title)."\" />";
    if(!isEmpty($desc)) {
        $extraHead .= "<meta property=\"og:description\" content=\"".strip_tags($desc)."\" />";
    }
    if ($hasart) {
        $extraHead .= "<meta property=\"og:image\" content=\"";
        $extraHead .= get_root_url() . "coverart?id=$id&amp;version=$pagevsn\"/>";
    }

    $extraHead .= "<link rel=\"canonical\" href=\"";
    $extraHead .= get_root_url() . "viewgame?id=$id\" />";
}

global $nonce;
$extraHead .= "
<script type=\"text/javascript\" nonce=\"$nonce\">
function checkReadMoreSections() {
    const windowHeight = window.outerHeight ?
        Math.min(window.innerHeight, window.outerHeight)
        : window.innerHeight;
    document.querySelectorAll('.readMore').forEach(section => {
        const expand = section.querySelector('.expand');
        if (!section.style.maxHeight && section.scrollHeight > windowHeight * 0.8) {
            expand.style.display = 'block';
        } else {
            expand.style.display = '';
        }
    })
}

addEventListener('resize', checkReadMoreSections);

addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.readMore').forEach(section => {
        const expand = section.querySelector('.expand');
        const button = expand.querySelector('button');
        button.addEventListener('click', () => {
            expand.style.display = '';
            section.style.maxHeight = section.scrollHeight + 'px';
            section.addEventListener('transitionend', () => {
                section.style.maxHeight = 'max-content';
            });
        });
    });
    checkReadMoreSections();
})
</script>
";

pageHeader("$title - Details", false, false,
           $extraHead, true);
initReviewVote();

// check for a game specified by IFID and not found
if (is_null(getID()) && get_req_data('ifid') != "") {

    // check for a title in the request; if it's there, try searching for
    // matches based on the title
    $title = get_req_data('title');
    if ($title != "") {
        $qtitle = mysql_real_escape_string($title, $db);
        $result = mysql_query(
            "select
                id, title, author from games
             where
                title like '$qtitle'
                or match (title) against ('$qtitle' in boolean mode)
             order by
                if (title like '$qtitle', 0, 1),
                match (title) against ('$qtitle' in boolean mode) desc
             limit 0, 3", $db);
        $titleSearch = mysqli_fetch_all($result, MYSQL_ASSOC);
    }

    ?>

    <h1>This IFID is not in the database</h1>

    <p>IFDB doesn't have a listing matching the <?php
echo helpWinLink("help-ifid", "IFID");
    ?>
    "<?php echo htmlspecialcharx(get_req_data('ifid')) ?>."  This
    could mean one of several things:

    <ul class=doublespace>
       <li><b>The game is listed in the database, but this IFID hasn't
       been entered for it yet.</b>
       <?php
           if (count($titleSearch) != 0) {
               echo "Here";
               if (count($titleSearch) == 1)
                   echo "'s a possible match";
               else
                   echo " are some possible matches";
               echo " based on the title:<ul>";
               foreach ($titleSearch as $t) {
                   $sid = $t['id'];
                   $stitle = htmlspecialcharx($t['title']);
                   $sauthor = htmlspecialcharx($t['author']);
                   echo "<li><a href=\"viewgame?id=$sid\">$stitle</a>, "
                       . "by $sauthor";
               }
               echo "</ul>If ";
               if (count($titleSearch) == 1)
                   echo "this isn't";
               else
                   echo "none of these are";
               echo " the game you're looking for, you can try a "
                   . "<a href=\"search\">full search</a> ";
           } else {
               echo "You can try <a href=\"search\">"
                   . "searching for the game</a> ";
           }
       ?>
       by title or author to see if it's listed.

       <p>If you do find an existing listing,
       you can help us improve IFDB by editing the listing and adding
       the missing IFID - just click "Edit this page" at the bottom of
       the game's page.

       <li><b>The game isn't listed yet.</b>  If you search for it and can't
       find it, it's probably not in the database.  You can help out
       by <a href="editgame?id=new">adding a new listing</a> for the game.
       (You don't have to be the game's author to do this - anyone can
       add a listing.)

       <li><b>The IFID might have been entered incorrectly.</b>  If you entered
       the IFID by hand, please double-check that it's correct.
    </ul>

    <?php
} else if ($errMsg) {
    echo "<font color=red><b>Error: $errMsg</b></font>";
} else {

// ------------------ VARIANT PAGE VIEWS -------------------------
//
// We use this same PHP script to show multiple page views: we can
// show the main page, pages of member reviews, or an editing history.

    if (isset($_REQUEST['history'])) {
        // we're showing the history, so this counts as a version view,
        // even though the version we're showing is the current version
        $historyView = true;
    }
    if (isset($_REQUEST['reviews']) || isset($_REQUEST['ratings'])) {
        // we're viewing a page of member reviews
        $reviewView = true;

        // note whether we're including ratings that don't have reviews
        $ratingsView = isset($_REQUEST['ratings']) && !$should_hide;

        // get the page we're showing, defaulting to 1 if it's non-positive
        $reviewPage = get_req_data('pg');
        if ($reviewPage != 'all' && $reviewPage < 1)
            $reviewPage = 1;
    }
    if (isset($_REQUEST['review'])) {
        // we're viewing a single review
        $oneReviewView = true;
    }
    if (isset($_REQUEST['downloads'])) {
        // we're viewing the downloads
        $downloadsView = true;
    }
    if (isset($_REQUEST['findmore'])) {
        // we're showing the 'recommendations' view
        $recView = true;
    }

    // the default view mode is the Detail view (this is the game's
    // "home page" view)
    $detailView = !($historyView || $reviewView || $oneReviewView || $recView || $downloadsView);

    // in history view, use the default external review layout - we're
    // not showing the full normal view in this case, so the normal
    // layout preferences don't apply
    if ($historyView) {
        $offsiteMode = 'A';
    }

?>
<div id='viewgame-body'>
<?php
    // ------------------------ DOWNLOADS -------------------------------
    if ($detailView || $historyView || $downloadsView) {

    if ($downloadsView) {
        echo "<p><a href=\"viewgame?id=$id\">Go to the "
            . "main page for this game</a>";
        echo "<div>";
    } else {
        echo '<div class="downloadfloat">';
    }
?>
    <div class="readMore">
    <section class="<?php if (!$downloadsView) echo "downloads"?>" id="externalLinks">
        <div>
              <h3>External Links</h3>
                    <?php

// Check to see if the game is available for download in any form.
// PC == "parchment capable" - a format that we can play with Parchment.
// HEX = Hugo file playable online with textadventures.online/play/?story=XXX
$foundGame = $foundHtml = $foundPC = $foundHex = $htmlUrl = $pcUrl = $foundAdrift = $adriftUrl = $hexUrl = false;
foreach ($links as $link)
{
    // if it's a game, note that we found a game link
    if ($link['isgame'])
        $foundGame = true;

    $unboxUrl = false;
    if ($link['compression'] && $link['compressedprimary']) {
        $open = urlencode($link['compressedprimary']);
        if (preg_match('!^https?://(www\.|mirror\.)?ifarchive\.org/!', $link['url'])) {
            $linkUrl = urlencode($link['url']);
            $unboxUrl = "https://unbox.ifarchive.org/?url=$linkUrl&open=$open";
        } else {
            $springThingUrl = preg_replace('!^https?://(www\.)?springthing\.net/(\d+)/files/(.*)$!',
                'https://ifarchive.org/if-archive/games/springthing/$2/$3', $link['url']);
            if ($springThingUrl !== $link['url']) {
                $springThingUrl = urlencode($springThingUrl);
                $unboxUrl = "https://unbox.ifarchive.org/?url=$springThingUrl&open=$open";
            } else {
                $springThingUrl = preg_replace('!^https?://(www\.)?springthing\.net/(\d+)/stories/[^/]+/(.*)$!',
                    'https://ifarchive.org/if-archive/games/springthing/$2/$3', $link['url']);
                if ($springThingUrl !== $link['url']) {
                    $springThingUrl = urlencode($springThingUrl);
                    $unboxUrl = "https://unbox.ifarchive.org/?url=$springThingUrl&open=$open";
                }
            }
        }
    }

    if ($link['fmtexternid'] == 'hypertextgame')
    {
        if (!$link['compression']) {
            $foundHtml = true;
            $htmlUrl = $link['url'];
            break;
        } else if ($unboxUrl) {
            $foundHtml = true;
            $htmlUrl = $unboxUrl;
            break;
        }
    }

    if (stripos($link['title'], "Play Online") !== false)
    {
        $foundGame = $foundHtml = true;
        $htmlUrl = $link['url'];
        break;
    }

    // if this is the first Parchment-capable link, and it's not compressed,
    // note it so that we can set up a Parchment play link to it
    if (in_array($link['fmtexternid'], [
        'zcode',
        'blorb/zcode',
        'glulx',
        'blorb/glulx',
        'tads2',
        'tads3',
        'hugo']))
    {
        if (!$link['compression']) {
            $foundPC = true;
            $pcUrl = urlencode(urlToMirror($link['url']));
            break;
        } else if ($unboxUrl) {
            $foundPC = true;
            $pcUrl = urlencode($unboxUrl);
            break;
        }
    }

    if (in_array($link['fmtexternid'], [
        'adrift',
        'adrift38',
        'adrift39',
        'adrift5',
        'adrift5/blorb']))
    {
        if (!$link['compression']) {
            $foundAdrift = true;
            if (preg_match('!^https?://www.adrift.co/cgi/download.cgi\?(\d+)!', $link['url'], $matches)) {
                // download.cgi does a 302 redirect to the real download URL, which play.adrift.co can't cope with
                // luckily, play.cgi does a 302 redirect to play.adrift.co with the canonical game URL
                $adriftUrl = "https://www.adrift.co/cgi/play.cgi?" . $matches[1];
            } else {
                $adriftUrl = "http://play.adrift.co/?game=" . urlencode($link['url']);
            }
            break;
        } else if ($unboxUrl) {
            $foundAdrift = true;
            $adriftUrl = "http://play.adrift.co/?game=" . urlencode($unboxUrl);
            break;
        }
    }
}
if ($foundGame)
{
    echo "<div class='viewgame__foundGame'>";

    $playOnlineButton = "";
    // if we have an HTML playable game, set up a play online link
    if ($foundHtml && $htmlUrl) {
        $ptarget = (is_kindle() ? "" : "target=\"_blank\"");
        $playOnlineButton = "<a href=\"$htmlUrl\" $ptarget "
            . "title=\"Play this game right now in your browser. No "
            . "installation is required.\" class=\"fancy-button viewgame__playOnline\">Play Online"
            . "</a>";
        echo "$playOnlineButton<br>";
    }

    // if we have a Parchment-capable game, set up a play-with-Parchment link
    if ($foundPC && $pcUrl) {
        $parchment = "https://iplayif.com/?story=";
        $ptarget = (is_kindle() ? "" : "target=\"_blank\"");
        $playOnlineButton = "<a href=\"$parchment$pcUrl\" $ptarget "
            . "title=\"Play this game right now in your browser, using "
            . "the Parchment interpreter. No installation is required.\" "
            . "class=\"fancy-button viewgame__playOnline\">Play Online"
            . "</a>";
        echo "$playOnlineButton<br>";
    }

    // if we have an ADRIFT game, set up a play-online link
    if ($foundAdrift && $adriftUrl) {
        $atarget = (is_kindle() ? "" : "target=\"_blank\"");
        $playOnlineButton = "<a href=\"{$adriftUrl}\" $atarget "
            . "title=\"Play this game right now in your browser. No "
            . "installation is required.\""
            . "class=\"fancy-button viewgame__playOnline\">Play Online"
            . "</a>";
        echo "$playOnlineButton<br>";
    }

    echo "</div>";
}
                    ?>
                 </div>

                   <?php
if (count($links) == 0 && $dlnotes == "") {
    echo "<i>There are no known download links for this game.</i>";
} else {
    // put the download notes at the top
    if ($dlnotes != "") {
        $dlnotes = preg_replace(
            "/([a-z0-9][\/.])([a-z0-9])/i", "$1$zwsp$2", $dlnotes);
        echo "<i>$dlnotes</i>";
    }

    // count compressed files
    $zips = [];
    $zipnotes = [];
    foreach ($links as $link) {
        $c = $link['compression'];
        if (!$c) {
            continue;
        }
        if (isset($zips[$c]) && $zips[$c]) {
            $zips[$c][0] += 1;
        }
        else {
            $result = mysqli_execute_query($db, "select `desc` from filetypes
                where id = ?", [$c]);
            $zips[$c] = [1, "", mysql_result($result, 0, "desc")];
            $zipnotes[] = $c;
        }
    }

    // use footnotes for any compression formats appearing more than once
    $footnoteid = 1;
    foreach ($zipnotes as $c) {
        if ($zips[$c][0] > 1) {
            $zips[$c][1] = getFootnoteStar($footnoteid++);
        }
    }

    // display the link list
    echo "<ul class=\"downloadlist\">";
    foreach ($links as $i => $link) {
        $url = $link['url'];
        $zipped = (strcasecmp(substr($url, -4), ".zip") == 0);
        $fmtisgame = $link['isgame'];
        $linktitle = zeroWidthSpaceUnderscores(
            htmlspecialcharx($link['title']
        ));
        $linkdesc = htmlspecialcharx($link['desc']);
        $fmtid = $link['fmtid'];
        $fmtexternid = $link['fmtexternid'];
        $fmtos = $link['osid'];
        $fmtosvsn = $link['osvsn'];
        $fmtname = $link['fmtname'];
        $fmtdesc = $link['fmtdesc'];
        $fmticon = $link['fmticon'];
        $fmtclass = $link['fmtclass'];
        $fmtcomp = $link['compression'];
        $compPri = zeroWidthSpaceUnderscores(
            htmlspecialcharx($link['compressedprimary'])
        );
        $osname = isset($link['osname']) ? $link['osname'] : "";
        $osvsnname = isset($link['osvsnname']) ? $link['osvsnname'] : "";
        $osicon = isset($link['osicon']) ? $link['osicon'] : "";

        // if it's an executable format, qualify the format name with
        // the OS name, since an executable is native to a particular OS
        $typename = ($fmtclass == 'X' ? "$osname $fmtname" : "");

        // if the OS version name is distinct from the OS name, mention
        // the minimum version in the desription
        if ($fmtos != $fmtosvsn && $fmtosvsn != "")
            $typename .= " ($osvsnname and later)";

        // build the full type description
        $typedesc = (($fmtdesc && $typename) ? "$typename: $fmtdesc" :
                     ($fmtdesc ? $fmtdesc : $typename));

        // if there's no title, use the base name from the URL as the title
        if ($linktitle == "") {
            $prsurl = parse_url($url);
            $linktitle = htmlspecialcharx(basename($prsurl['path']));
        }

        // map the URL to the user's selected IF Archive mirror, if
        // applicable, and fix it up for HTML display
        $url = fixUrl(urlToMirror($url));

        // add a note about zip format if applicable
        $zipnote = "";
        $zipstar = "";
        if ($fmtcomp) {
            $z = $zips[$fmtcomp];
            if ($z[0] == 1) {
                $zipnote = " <i>({$z[2]})</i>";
            }
            else
                $zipstar = " <span class=zipstar>{$z[1]}</span>";
        }

        // generate the information
        echo "<li>";

        $iconsrc = ($osicon ? "opsys?geticon=$fmtos" :
                    ($fmticon ? "fileformat?geticon=$fmtid" :
                     false));
        if ($iconsrc) {
            echo "<a href=\"$url\"><img class=\"fileIcon\" src=\"$iconsrc\"></a>";
        } else {
            echo "<div class=\"fileIcon\"></div>";
        }

        echo "<div class='downloaditem'>
              <a href=\"$url\"><b>$linktitle</b></a>$zipstar<br>";

        $unbox_supported = [17, 22, 23, 41];

        if (in_array($fmtcomp, $unbox_supported) && (strpos($url, 'https://ifarchive.org') === 0)) {
            echo "<div class='details'><a href='https://unbox.ifarchive.org/?url=" . urlencode($url) . "'>View Contents</a></div>";
        }
        
        if ($compPri) {
            echo "<span class=dlzipmain><img src=\"/img/blank.gif\" "
                . "class=\"zip-contents-arrow\">Contains "
                . "<b>$compPri</b></span><br>";
        }

        if ($linkdesc) {
            $linkdesc = preg_replace(
                "/([a-z0-9][\/.])([a-z0-9])/i", "$1$zwsp$2", $linkdesc);
            echo "<span class=dlnotes>$linkdesc<br></span>";
        }

        if ($typedesc || $zipnote) {
            echo "<span class=fmtnotes>$typedesc$zipnote</span>";
        }
        echo "</div></li>";
    }
    echo "</ul>";

    // add a footnote on each compressed format that appeared more than once
    foreach ($zipnotes as $zipnote) {
        $z = $zips[$zipnote];
        if ($z[0] > 1)
            echo "<div class=zipnote><span class=zipstar>{$z[1]}</span> "
                . "<span class=zipnote>{$z[2]}</span></div>";
    }
}
         ?>
    </section>
    <div class="expand"><button>Read More</button></div>
    </div>

   <?php
   // ------------ end of the download table -----------------
   if (!$downloadsView) {
   ?>

   <table class=gamerightbar>
      <tr>
         <td>
            <h3>Have you played this game?</h3>
            <?php
if ($curuser) {
    $result = mysqli_execute_query($db, "select userid from playedgames
        where userid=? and gameid=?", [$curuser, $id]);
    $played = mysql_num_rows($result) > 0;

    $result = mysqli_execute_query($db, "select userid from wishlists
        where userid=? and gameid=?", [$curuser, $id]);
    $wishlist = mysql_num_rows($result) > 0;

    $result = mysqli_execute_query($db, "select userid from unwishlists
        where userid=? and gameid=?", [$curuser, $id]);
    $unwishlist = mysql_num_rows($result) > 0;
            ?>
            <script type="text/javascript" nonce="<?php global $nonce; echo $nonce; ?>">
            <!--
function updateRating(rating)
{
    if (rating) {
        if (submitRating.style.display === 'block') return;
    } else {
        submitRating.style.display = 'none';
    }
    jsonSend("setrating?game=<?php echo $id?>&rating=" + rating,
             "ratingSaveMsg");
}
function updatePlayed(id, stat)
{
    jsonSend("setplayed?game=<?php echo $id?>&played="
             + (ckboxGetObj("ckPlayed").checked ? "1" : "0"),
             "ckPlaySaveMsg", (d) => {updatePlaylistCount(d.newCount);});
}
function updateWishList(id, stat)
{
    jsonSend("setwishlist?game=<?php echo $id?>&add="
             + (ckboxGetObj("ckWishList").checked ? "1" : "0"),
             "ckWishlistSaveMsg", (d) => {updateWishlistCount(d.newCount)});
}
function updateUnwishList(id, stat)
{
    jsonSend("setunwishlist?game=<?php echo $id?>&add="
             + (ckboxGetObj("ckUnwishList").checked ? "1" : "0"),
             "ckUnwishlistSaveMsg");
}
//-->
</script>
    <?php


    // check to see if I've made any explicit cross-recommendations
    // of my own
    if ($curuser)
    {
        $result = mysqli_execute_query($db,
            "select count(*) from crossrecs
             where userid = ? and fromgame = ?", [$curuser, $id]);
        list($myCrossRecs) = mysql_fetch_row($result);
    }

    initStarControls();
    global $nonce;
    echo "<style nonce='$nonce'>\n"
        . ".viewgame__playedSection { margin: 1.25ex 0 0.75ex 0; }\n"
        . "#submitRating { display: none; }\n"
        . "</style>\n";

    echo "<div class=indented>"

        . "<div class='viewgame__playedSection'>"
        . "<span id=\"ratingCaption\"><b>Rate it:</b></span> "
        . showStarCtl("ratingStars", $currentUserRating,
                      "updateRating", "mouseOutRating")
        . "<button id='submitRating' class='fancy-button'>Submit Rating</button>"
        . "<script nonce='$nonce'>\n"
        . "let arrowKeys = new Set(['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown']);"
        . "ratingStars.addEventListener('keydown', e => {\n"
        . "  if (arrowKeys.has(e.key)) submitRating.style.display = 'block'\n"
        . "});\n"
        . "submitRating.addEventListener('click', () => {\n"
        . "submitRating.style.display = 'none';\n"
        . "updateRating(ratingStars.querySelector('input:checked').value);\n"
        . "});\n"
        . "</script>"
        . " <span id=\"ratingSaveMsg\" class=xmlstatmsg aria-live='polite'></span><br>"
        . "<a href=\"review?id=$id&userid=$curuser\">"
        . ($currentUserReview != "" ? "Revise my review" : "Review it")
        . "</a><br>"
        . "<a href=\"crossrec?game=$id&edit\">"
        . ($myCrossRecs ? "Edit my suggestions ($myCrossRecs)"
                        : "Suggest similar games")
        . "</a>"
        . "</div>"

        . "<div class='viewgame__playedSection'>";
    checkboxWrite("ckPlayed", "I've played it", $played, "updatePlayed");
    echo " (<a href=\"playlist?type=played\">view</a>)"
        . " &nbsp; <span id=\"ckPlaySaveMsg\" class=\"xmlstatmsg\">"
        . "</span><br>";
    checkboxWrite("ckWishList", "It's on my wish list", $wishlist,
                  "updateWishList");
    echo " (<a href=\"playlist?type=wishlist\">view</a>) "
        . " &nbsp; <span id=\"ckWishlistSaveMsg\" class=\"xmlstatmsg\">"
        . "</span><br>";
    checkboxWrite("ckUnwishList", "I'm not interested", $unwishlist,
                  "updateUnwishList");
    echo " (<a href=\"playlist?type=unwishlist\">view</a>) "
        . " &nbsp; <span id=\"ckUnwishlistSaveMsg\" class=\"xmlstatmsg\">"
        . "</span><br></div></div>";

 
//------------------PHP for the estimated play time control panel---------------------------------

    // Check the database to see if the user has a time vote stored for this game.
    // If one exists, get the stored time in minutes (and the time note, if present).
    $mystoredtime=0;
    $mystoredtimenote="";
    $result = mysqli_execute_query($db, "select time_in_minutes, time_note from playertimes where gameid = ? and userid = ?", [$id, $curuser]);
    if (!$result) throw new Exception("Error: " . mysqli_error($db));
    [$mystoredtime, $mystoredtimenote] = mysql_fetch_row($result);

    // At this point $mystoredtime should reflect the player's actual stored time for this game
    $my_time_as_text = "";
    $time_announcement = ""; // The string shown in the Estimated Play Time control panel
    if ($mystoredtime >= 1) {
        $my_time_as_text = convertTimeToText($mystoredtime);
        $time_announcement = "Your vote: " . $my_time_as_text;
        if ($mystoredtimenote) {
            $time_announcement .= "—\"$mystoredtimenote\"";
        }
    }
   
//-----------------------Estimated play time control panel begins----------------------------
?>

<div class=indented>
<div id='timeVoteControls' class='viewgame__playedSection'><?php // There's an event listener attached to "timeVoteControls" ?>
<span id="timeVoteControlsCaption"><b>Estimated play time:</b></span>

<div id='submitTimeSection'>
<span id='howLong'>Vote on how long it takes to finish this game.</span><br>
<details><summary>Tips</summary>
<ul>
<li>Vote only if you've played the game.</li>
<li>Vote on how long it takes to get to one final ending without relying extensively on a walkthrough.</li>
<li>Time spent away from the game doesn't count.</li>
<li>To help players gauge how long a game with puzzles might take, you can note if your time is with or without hints.</li>
<li>Times don't need to be exact. Good-faith estimates are fine.</li>
<li>Your vote will be publicly attributed to you.</li>
</ul></details>
<p><label for='hours'>Hours:</label>
<input type='number' name='hours' id='hours' min=0 max=200>
<label for='minutes'>Minutes:</label>
<input type='number' name='minutes' id='minutes' min=0 max=59></p>
<p><label for='timeNote'>Time Note:</label>
<input type='text' name='timeNote' id='timeNote' maxlength='150' size='21' placeholder='Without hints.'></p>
<button id='submitTimeButton' class='fancy-button' type='submit'>Submit Time</button>
</div>

<div id='removeTimeSection'>
<span id='yourTime'><?php echo $time_announcement?></span><br>
<button id='removeTimeButton' class='fancy-button'>Remove Time</button>
</div>

<span id="timeSaveMsg" class=xmlstatmsg aria-live='polite'></span><br>

<div id='timeSavedSection'>
<p id='timeSubmittedMessage'>Your time has been submitted.</p>
</div>


<script nonce="<?php global $nonce; echo $nonce; ?>">

// When the user clicks the "Submit Time" button, get the input 
// from the hours and minutes fields, validate it, convert it to 
// minutes only, and save it to the database (with the note, if present).
function submitTime() {
    if (document.getElementById('ckBoxckPlayed').checked==false) {
         document.getElementById("timeSaveMsg").innerHTML="Error: This game isn't on your list of played games.";
         return;
    }
    var new_hours = document.getElementById('hours').value;
    var new_minutes = document.getElementById('minutes').value;
    if (new_hours == "") {    // If the hours field was blank, interpret it as 0
        new_hours = 0;
    }
    if (new_minutes == "") {  // If the minutes field was blank, interpret it as 0
        new_minutes = 0;
    }
    var hours_are_digits = isOnlyDigits(new_hours); 
    var minutes_are_digits = isOnlyDigits(new_minutes);
    if (hours_are_digits == false || minutes_are_digits == false) {
        document.getElementById("timeSaveMsg").innerHTML="Please enter valid numbers.";
        return;
    }
    if (new_hours > 200) {     // Negative numbers will hopefully be eliminated by "Digits only"
        document.getElementById("timeSaveMsg").innerHTML="For hours, please enter a number from 0 to 200.";
        return;
    }
    if (new_minutes > 59) {
        document.getElementById("timeSaveMsg").innerHTML="For minutes, please enter a number from 0 to 59.";
        return;
    }
    var new_time = convertToMinutes(new_hours, new_minutes);
    if (new_time < 1) {
        document.getElementById("timeSaveMsg").innerHTML="The total time must be at least one minute.";
        return;
    }
    // Time is valid, as far as we can tell
    var time_note = document.getElementById('timeNote').value;
    jsonSend(`settime?game=<?= $id?>&newtime=${new_time}&note=${encodeURIComponent(time_note)}`, "timeSaveMsg", swapTimeSections);
}
// Attach the submitTime function to the "Submit Time" button.
document.getElementById("submitTimeButton").addEventListener("click", submitTime);


// Remove the user's time for this game from the database.
function removeTime() {
    jsonSend("settime?game=<?php echo $id?>&newtime=0", "timeSaveMsg", swapTimeSections);
}
// Attach the removeTime function to the Remove Time button.
document.getElementById("removeTimeButton").addEventListener("click", removeTime);


// Check whether a string contains only digits.
function isOnlyDigits(a_string) {
    if (/^\d+$/.test(a_string)) {
        return true;
    }
    return false;
}


// Take hours and minutes and convert them into just minutes
// so we can store the time as minutes in the database.
function convertToMinutes(hours, minutes) {
    // They need to be integers so they don't get concatenated when we're trying to add them
    hours = Number(hours); 
    minutes = Number(minutes);
    hours_into_minutes = hours * 60;
    total_minutes = hours_into_minutes + minutes;
    return total_minutes;
}


// The Estimated Play Time control panel has a "submitTimeSection," a "removeTimeSection," and
// a "timeSavedSection." Only one of the sections should be visible at a time. These functions
// show and hide the sections.

function showSubmitTimeSection() { 
    submitTimeSection.style.display = "block";
    removeTimeSection.style.display  = "none";
    timeSavedSection.style.display = "none";
}

function showRemoveTimeSection() { 
    submitTimeSection.style.display = "none";
    removeTimeSection.style.display = "block";
    timeSavedSection.style.display = "none";
}

function showTimeSavedSection() { 
    submitTimeSection.style.display = "none";
    removeTimeSection.style.display = "none";
    timeSavedSection.style.display = "block";
    
}

// After successfully submitting or removing a time, hide or show 
// the appropriate sections of the estimated play time control panel.
function swapTimeSections() {
    if (document.getElementById("timeSaveMsg").innerHTML == "Saved") { 
        if (submitTimeSection.style.display == "block") { 
            //The submit time section is visible, which means we just successfully saved a new time.        
            showTimeSavedSection();
        } else if (removeTimeSection.style.display == "block") {
            //The remove time section is visible, which means we just successfully removed our time.  
            showSubmitTimeSection();
        }
    } // Don't swap the time controls if there was an error saving.
}
// Attach the swapTimeSections function to the timeVoteControls div.
document.getElementById("timeVoteControls").addEventListener("load", swapTimeSections);


// When the page first loads, show the relevant time controls based on
// whether the user has a time already stored for this game. To find out, we
// check whether there's a message displaying the user's time.
function prepareTimeControls() {
    var your_time_message = document.getElementById("yourTime").innerHTML;
    if (your_time_message == "") {
        showSubmitTimeSection();
    } else if (your_time_message != "") {
        showRemoveTimeSection();
    }
}
prepareTimeControls();


</script>

<?php
//-----------------------Estimated play time control panel ends------------------------------


} else {
    echo "You can rate this game, record that you've played it, "
        . "or put it on your wish list after you "
        . "<a href=\"login?dest=viewgame?id=$id\">log in</a>.";
}

            ?>
         </td>
      </tr>
   </table>

</div>
<?php
    } // if (!$downloadsView)

    } // if ($detailView || $historyView)

//------------------------- MAIN SUMMARY -------------------------

?>

<div class='viewgame__mainSummary'>
        <?php
            if ($should_hide) {
                ?><div class=restricted>Links to this page and its ratings have been restricted, due to violations of our <a href="/code-of-conduct">Code of Conduct</a>.</div><?php
            }
        ?>
         <p>
         <section id="viewgame__header" cellspacing=0 cellpadding=0 border=0>
               <?php
if ($hasart) {
    $arthref = "{$_SERVER['PHP_SELF']}?coverart&id=$id";
    if (isset($_REQUEST['version']))
        $arthref .= "&version=" . $_REQUEST['version'];
               ?>
           <div class=coverart>

              <a href="<?php echo $arthref ?>&ldesc">
                 <?php echo coverArtThumbnail($id, 175, isset($_REQUEST['version']) ? $_REQUEST['version'] : $pagevsn); ?>
              </a>
           </div>
               <?php
} // if ($hasart)
               ?>

           <div>
              <h1><?php echo $title ?></h1>

              <b>by <?php

// build the list of authors - hyperlink each one in the list to a
// search for that author's name (using the "author:" search modifier)
$authorList = splitPersonalNameList($authorExt != "" ? $authorExt : $author);
$conj = "";
foreach ($authorList as $i => $au) {
    // get this author
    $au = $authorList[$i];

    // check for a profile link
    $proLink = "";
    while ($authorExt != ""
           && preg_match("/\s*\{([a-z0-9]+)\}/i", $au,
                         $match, PREG_OFFSET_CAPTURE, 0)) {

        // pull out this author profile TUID
        $pro = $match[1][0];

        // remove the matched text
        $au = substr_replace($au, "", $match[0][1], strlen($match[0][0]));

        // make sure the profile exists
        $qpro = mysql_real_escape_string($pro, $db);
        $result = mysql_query(
            "select id, name from users where id='$qpro'", $db);
        if (mysql_num_rows($result) != 0) {
            // build this profile link
            $hpro = urlencode($pro);
            $proName = htmlspecialcharx(mysql_result($result, 0, "name"));
            $proLink .= " </b><a class=authorProfileLink "
                        . "href=\"showuser?id=$hpro\" "
                        . "title=\"View $proName's profile\">profile</a><b>";
        }
    }

    // quote the author's name for display and use in the search HREF
    $uau = urlencode($au);
    $dau = htmlspecialcharx($au);

    // show the link
    echo "$conj<a href=\"search?searchfor=author%3A$uau\">$dau</a>$proLink";

    // figure the conjunction for the next in the list
    $conj = ($i + 2 == count($authorList) ? ($i == 0 ? " and " : ", and ") : ", ");
}
                  ?></b><br><br>
                  <div class=details>
                     <?php
if (!isEmpty($seriesname)) {
    if (isEmpty($seriesnum))
        echo "Part of ";
    else
        echo "Episode $seriesnum of ";
    echo "<a href=\"search?searchfor=series:" . urlencode($seriesname)
        . "\">".htmlspecialchars($seriesname)."</a><br>";
}
                     ?>
                     <?php if (!isEmpty($pubYear)) echo "$pubYear<br>" ?>
                     <?php
if (!isEmpty($genre)) {
    $genres = explode(",", str_replace("/", ",", $genre));
    echo join(", ", array_map(
        fn($genre) => "<a href=\"search?searchfor=genre:" . urlencode($genre) . "\">".htmlspecialchars($genre)."</a>",
        $genres)) . "<br>";
}
                     ?>
                     <?php if (!isEmpty($system)) echo htmlspecialchars($system)."<br>" ?>
                     <?php
                        $showExternalLinksAnchor = count($links) && ($detailView || $historyView);
                        if (!isEmpty($website) || $showExternalLinksAnchor) {
                            if (!isEmpty($website) && $showExternalLinksAnchor) {
                                if ($playOnlineButton) {
                                    echo "<div class=\"viewgame__externalLinksDiv\"><span class='viewgame__externalLinksAnchor'>$playOnlineButton | </span>"
                                        . "<a href=\"".htmlspecialcharx($website)."\">Web Site</a>"
                                        . "<span class='viewgame__externalLinksAnchor'> | <a href='#externalLinks'>External Links</a></span></div>";
                                } else {
                                    echo "<div class=\"viewgame__externalLinksDiv\"><a href=\"".htmlspecialcharx($website)."\">Web Site</a><span class='viewgame__externalLinksAnchor'> | <a href='#externalLinks'>External Links</a></span></div>";
                                }
                            } else if (!isEmpty($website)) {
                                echo "<div><a href=\"".htmlspecialcharx($website)."\">Web Site</a></div>";
                            } else {
                                if ($playOnlineButton) {
                                    echo "<div class='viewgame__externalLinksAnchor viewgame__externalLinksDiv'>$playOnlineButton | "
                                        . "<a href='#externalLinks'>External Links</a></div>";
                                } else {
                                    echo "<a class='viewgame__externalLinksAnchor viewgame__externalLinksDiv' href='#externalLinks'>External Links</a></div>";
                                }
                            }                        }
                     ?>
              </div>
           </div>
         </section>

         <?php


// ------------------- Query the reviews and recommendations ---------------
// We need to query these items for the Detail and Recommendation views.
//

    if ($detailView || $recView) {

        // Check for cross-recommendations.  There are two forms
        // of recommendation we generate: Recommend Lists that mention
        // this game, and other games that were highly rated by people
        // who rated this game highly.

        // look for lists containing this game
        $params = [$id];
        $sortMeLast = "";
        $sandbox = "not users.sandbox";
        if ($curuser) {
            if ($mysandbox != 0) $sandbox = "1";
            $sortMeLast = "if(reclists.userid = ?, 2, 1),";
            $params[] = $curuser;
        }
        $result = mysqli_execute_query($db,
            "select
                reclists.id as listid,
                reclists.title as title,
                reclists.`desc` as `desc`,
                users.id as userid,
                users.name as username
             from
                reclists
                join reclistitems
                join users
             where
                reclistitems.gameid = ?
                and reclists.id = reclistitems.listid
                and users.id = reclists.userid
                and $sandbox
             group by reclistitems.listid
             order by $sortMeLast rand()
             limit 0, 4", $params);

        // fetch the recommendation lists to show
        $lists = mysqli_fetch_all($result, MYSQL_ASSOC);

        // look for polls with votes for this game
        $params = [$id];
        $sortMeLast = "";
        $sandbox = "not uv.sandbox";
        if ($curuser) {
            if ($mysandbox != 0) $sandbox = "1";
            $sortMeLast = "if(v.userid = ? or p.userid = ?, 2, 1),";
            $params[] = $curuser;
            $params[] = $curuser;
        }
        $result = mysqli_execute_query($db,
            "select
               p.pollid as pollid,
               p.title as title,
               p.`desc` as `desc`,
               u.id as userid,
               u.name as username
             from
               polls as p
               join pollvotes as v on v.pollid = p.pollid
               join users as u on u.id = p.userid
               join users as uv on uv.id = v.userid
             where
               v.gameid = ?
               and $sandbox
             group by
               p.pollid
             order by
               $sortMeLast rand()
             limit
               0, 4", $params);

        // fetch the polls
        $polls = mysqli_fetch_all($result, MYSQL_ASSOC);

        $overloaded = 1;
        if (!$overloaded) {
            // Look for other games to recommend - these are games that
            // were given 4- or 5-star ratings by members who also gave
            // the current game a 4- or 5-star rating, AND which games
            // are unrated AND unplayed by the current user.
            //
            // If we're logged in, make sure the ratings are coming from
            // other users (don't bother generating recommendations based
            // on the current user's own ratings, for obvious reasons).
            // Also exclude games that are already on the current user's
            // play list or wish list - they obviously already know about
            // these games, so there's no reason to recommend them.
            if ($curuser && !$cssOverride) {
                $joinOtherUser = "";
                $andOtherUser = "and r1.userid != '$curuser'
                                and r2.userid != '$curuser'
                                and r2.gameid not in (
                                    select gameid from playedgames pg where pg.userid = '$curuser'
                                    union
                                    select gameid from wishlists wl where wl.userid = '$curuser'
                                    union
                                    select gameid from unwishlists uw where uw.userid = '$curuser'
                                )";
            } else {
                $joinOtherUser = "";
                $andOtherUser = "";
            }
            $result = mysql_query(
                "select
                games.id as id,
                games.title as title,
                games.author as author,
                games.`desc` as `desc`,
                (games.coverart is not null) as hasart
                from
                (games,
                reviews as r1,
                reviews as r2)
                $joinOtherUser
                where
                r1.gameid = '$qid'
                and r1.special is null and r2.special is null
                and r1.rating >= 4
                and r2.gameid != r1.gameid
                and r2.rating >= 4
                and r1.userid = r2.userid
                and games.id = r2.gameid
                and ifnull(now() >= r1.embargodate, 1)
                and ifnull(now() >= r2.embargodate, 1)
                and not (games.flags & " . FLAG_SHOULD_HIDE . ")
                $andOtherUser
                group by r2.gameid
                order by rand()
                limit 0, 3", $db);

            // fetch the cross-recommendations
            $crossrecs = mysqli_fetch_all($result, MYSQL_ASSOC);
        } else {
            $crossrecs = [];
        } 

        // add current-user exclusions for explicit cross-recs, if logged in
        if ($curuser && !$cssOverride) {
            $joinOtherUser = "left outer join playedgames as pg"
                             . "  on pg.userid = '$curuser'"
                             . "  and pg.gameid = c.togame"
                             . " left outer join wishlists as wl"
                             . "  on wl.userid = '$curuser'"
                             . "  and wl.gameid = c.togame"
                             . " left outer join unwishlists as uw"
                             . "  on uw.userid = '$curuser'"
                             . "  and uw.gameid = c.togame"
                             . " left outer join crossrecs as cmine "
                             . "  on cmine.fromgame = c.fromgame"
                             . "  and cmine.togame = c.togame"
                             . "  and cmine.userid = '$curuser'";
            $andOtherUser = "and cmine.togame is null"
                            . " and pg.userid is null"
                            . " and wl.userid is null"
                            . " and uw.userid is null";
        } else {
            $joinOtherUser = "";
            $andOtherUser = "";
        }

        // check for explicit cross-recommendations
        $sandbox = $mysandbox ? "1" : "not(u.sandbox) and not (u2.sandbox)";
        $result = mysql_query(
            "select
               c.togame as id,
               g.title as title,
               g.author as author,
               g.`desc` as `desc`,
               (g.coverart is not null) as hasart,
               g.pagevsn,
               c.notes as notes,
               (select count(*) from crossrecs as c2
                where c2.fromgame = '$qid' and c2.togame = c.togame)
                as votecount
             from
               crossrecs as c
               join games as g on g.id = c.togame
               join crossrecs as c2 on c2.togame = c.togame
               join users as u on c.userid = u.id
               join users as u2 on c2.userid = u2.id
               $joinOtherUser
             where
               c.fromgame = '$qid'
               and not (g.flags & " . FLAG_SHOULD_HIDE . ")
               and $sandbox
               $andOtherUser
             group by
               c.fromgame, c.togame
             order by
               rand()
             limit
               0, 3", $db);

        $ecrossrecs = mysqli_fetch_all($result, MYSQL_ASSOC);

        // if we have any cross-recommendations, limit the member
        // reviews to the top 3; otherwise, show up to 5 reviews
        $reviewsOnHomePage =
            (($lists || $polls || $crossrecs || $ecrossrecs) ? 3 : 5);
    }

// --------------------- GAME DETAILS -------------------------------

    // show the review summary if we're in Detail View mode
    if ($detailView) {
?>
         <p>
         <div class=details>
            <?php

$embargoCnt = 0;
if ($curuser) {
    $result = mysql_query(
        "select id, date_format(embargodate, '%M %e, %Y') from reviews
         where userid = '$curuser' and gameid = '$qid'
           and embargodate > now()", $db);
    $embargoCnt = mysql_num_rows($result);
    if ($embargoCnt > 0)
        list($embargoID, $embargoDate) = mysql_fetch_row($result);
}


// --------------------PHP Function for displaying median play time--------------------------



function displayMedianTime($rounded_median_time, $alltimes) {
    if ($rounded_median_time < 1) return;
    // Turn the total minutes into hours and minutes, and then text
    $official_estimated_time_text = convertTimeToText($rounded_median_time);
    echo "<details><summary>Estimated play time: ";
    echo $official_estimated_time_text;
    $s = (count($alltimes) === 1) ? "" : "s";
    echo " (based on " . count($alltimes) . " vote$s)</summary><br>";
    echo "Members voted for the following times for this game:";
    echo "<ul>";
    foreach ($alltimes as $t) {
        $time_vote_text = "<strong>" . convertTimeToText($t['time_in_minutes']) . "</strong>";
        $note = htmlspecialchars($t['time_note']);
        if ($t['player_time_id'] > 388) {
            // For new time votes, add the note (if present) and link to the user's profile
            if ($note != "") {
                $time_vote_text .= ": \"$note\"";
            }
            $time_vote_text .= " — <a href='showuser?id={$t['userid']}'>{$t['name']}</a>";
        } else {
            // Old time votes are attributed to "Anonymous"
            $time_vote_text .= " — Anonymous <a href='https://ifdb.org/news?item=152'>until December 19</a>";
        }
        echo "<li>$time_vote_text</li>";
    }
    echo "</ul></details>";
}

//--------------------End of PHP Functions for displaying median time-----------------

if ($ratingCntTot == 0 && $memberReviewCnt == 0) {
    displayMedianTime($rounded_median_time, $alltimes);
    echo showStars(0, true) . " No reviews yet";
    if ($embargoCnt == 0)
        echo " - <a href=\"review?id=$id&userid=$curuser\">be the first</a>";
} else if ($ratingAvg == 0 && $memberReviewCnt == 0) {
    echo "<a href=\"viewgame?id=$id&ratings\" "
        . "title=\"View all ratings and reviews for this game\">"
        . "$ratingCntTot rating" . ($ratingCntTot != 1 ? "s" : "")
        . "</a><br>";
    displayMedianTime($rounded_median_time, $alltimes);
} else {
    if (!$should_hide && $ratingAvg != 0) {
        echo showStars($ratingAvg)
            . " (based on <a href=\"viewgame?id=$id&ratings\" "
            . "title=\"View all ratings and reviews for this game\">"
            . "$ratingCntAvg rating" . ($ratingCntAvg != 1 ? "s" : "")
            . "</a>)<br>";
    }

    displayMedianTime($rounded_median_time, $alltimes);

    if ($memberReviewCnt != 0) {
        $href = ($memberReviewCnt > $reviewsOnHomePage)
                ? "viewgame?id=$id&reviews" : "#memberReviews";
        echo "<a href=\"$href\">$memberReviewCnt review"
            . ($memberReviewCnt != 1 ? "s" : "")
            . "</a>";
    }
    else {
        echo "No reviews yet";
        if ($embargoCnt == 0)
            echo " - <a href=\"review?id=$id&userid=$curuser\">be the first</a>";
    }
}

if (!$should_hide) {
    $result = mysql_query(
        "select count(userid) from playedgames where gameid='$qid'", $db);
    list($playlistCnt) = mysql_fetch_row($result);

    $emdash = false;

    if ($playlistCnt) {
        $emdash = true;
        echo " &mdash; <a id=playlistCount href='whoselist?game=$id&type=playlist' class='silent'>";
        if ($playlistCnt == 1) {
            echo "1 member has";
        } else {
            echo "$playlistCnt members have";
        }
        echo " played this game.</a>";
    }

    $result = mysql_query(
        "select count(userid) from wishlists where gameid='$qid'", $db);
    list($wishlistCnt) = mysql_fetch_row($result);

    if ($wishlistCnt) {
        if (!$emdash) {
            echo " &mdash;";
        }
        echo " <a id=wishlistCount href='whoselist?game=$id&type=wishlist' class='silent'>It's on $wishlistCnt wishlist";
        if ($wishlistCnt != 1) {
            echo "s";
        }
        echo ".";
        echo "</a>";
    }
}

?>
<script type="text/javascript" nonce="<?php global $nonce; echo $nonce; ?>">
<!--
function updatePlaylistCount(n)
{
    if (n === null || n === undefined)
        return;
    document.getElementById("playlistCount").innerHTML =
        "" + (n == 0 ? "No" : n) + " member" + (n == 1 ? " has" : "s have")
        + " played this game.";
}
function updateWishlistCount(n)
{
    if (n === null || n === undefined)
        return;
    document.getElementById("wishlistCount").innerHTML =
        (n == 0 ? "It's not on any wish lists yet" :
         "It's on " + n + " wishlist" + (n == 1 ? "." : "s."));
}
</script>
<?php

if ($embargoCnt > 0)
    echo "<br><i>Your review of this game is hidden until $embargoDate - "
        . "<a href=\"review?id=$id&userid=$curuser\">Revise it</a></i>";

            ?>
         </div>

<?php

    } // if ($detailView)

    // show the description, if it's present AND we're in Detail or
    // History mode
    if (!isEmpty($desc) && ($detailView || $historyView)) {
?>
         <h3>About the Story</h3>
         <div class="readMore"><p><?php echo $desc ?></p>
            <div class="expand"><button>Read More</button></div>
        </div>
<?php
    }
?>
<?php
// ------------ end of the main page layout table -----------------
?>

</div>

<?php
    // ---------------- Awards Section ----------------------------
    if ($detailView) {

        // look up awards for this game
        $result = mysqli_execute_query($db,
            "select
               c.compid, c.title,
               d.divname,
               g.place
             from
               compgames as g
               join competitions as c on c.compid = g.compid
               join compdivs as d on d.divid = g.divid
             where
               g.gameid = ?
             order by
               lower(c.title), d.divno, lower(d.divname)", [$id]);

        // if we have any rows, show the awards section
        if (mysql_num_rows($result) > 0)
        {
            // start the section
            echo "<h2>Awards</h2><div class=hangindentedMore>";

            // display the award rows
            $lastComp = false;
            $awards = [];
            while ([$compID, $compTitle, $compDivName, $compPlace] =
                    mysql_fetch_row($result))
            {
                $compTitle = htmlspecialcharx($compTitle);
                $compDivName = htmlspecialcharx($compDivName);
                $compPlace = htmlspecialcharx($compPlace);

                // build the comp link
                $comp = "<a href=\"viewcomp?id=$compID\">$compTitle</a>";

                // if this is a new comp, flush the last one
                if ($comp != $lastComp)
                {
                    // display the last one
                    if ($lastComp)
                        echo "<p>" . awardList($awards) . " - $lastComp</p>";

                    // start the new one
                    $lastComp = $comp;
                    $awards = [];
                }

                // add this award to the list
                $awards[] = [$compPlace, $compDivName];
            }

            // flush the last award
            echo "<p>" . awardList($awards) . " - $lastComp</p>";

            // close the section
            echo "</div>";
        }
    }
?>

         <?php

    // if we're in History mode, show the page history
    if ($historyView) {

//----------------------- PAGE HISTORY SECTION ------------------------

    // show the page history

    // start off with the current version
    echo "<h2>Page Update History</h2><div class=indented>
            <table cellspacing=0 cellpadding=0 border=0>
            <tr valign=baseline><td>";

    // if we're showing the latest version, flag it
    if (!isset($_REQUEST['version']) || $_REQUEST['version'] == $pagevsn)
        echo "<img src=\"/img/blank.gif\" class=\"current-version-marker\">&nbsp;";

    echo "</td><td>
            <a href=\"viewgame?history&version=$pagevsn&id=$id\">
            v.$pagevsn: $moddatelatest</a> -
            <a href=\"showuser?id=$editedbyid\">$editedbyname</a>
            (Current Version)
            - <a href=\"editgame?id=$id\">Edit Page</a>";

    if ($adminPriv) {
        echo " - <a href=\"rollbackGameVersion?game=$id\">Delete Version</a>";
    }

    echo " - <a href=\"viewgame?id=$id\">Normal View</a>
          <br>";

    // query up the version history
    $result = mysql_query("select pagevsn, editedby, users.name editorname,
               date_format(moddate, '%d-%b-%Y %H:%i') moddate, deltas
            from games_history
              left outer join users on users.id = editedby
            where games_history.id = '$qid'
            order by pagevsn desc", $db);
    $rowcnt = mysql_num_rows($result);
    while ([$ivsn, $ieditor, $ieditorname, $idate, $deltas] =
            mysql_fetch_row($result)) {
        // make the user name safe for display
        $ieditorname = htmlspecialcharx($ieditorname);

        // set up the linked user name
        if ($ieditor)
            $iedlink = "<a href=\"showuser?id=$ieditor\">$ieditorname</a>";
        else
            $iedlink = "IFDB";

        // deserialize the deltas
        $deltas = unserialize($deltas);

        // get the description of the changes
        $changeList = getDeltaDesc($deltas);

        // show which columns changed in the *next* version - each
        // history record saves the old values for the columns edited
        // in the *following* version
        if ($changeList) {
            echo "<div class=indented><span class=details>"
                . "<i>Changed $changeList</i></span></div>";
        }

        // start the new row
        echo "</td></tr><tr valign=baseline><td>";

        // if this is the active version, highlight it
        if (isset($_REQUEST['version']) && $ivsn == $_REQUEST['version'])
            echo "<img src=\"/img/blank.gif\" class=\"current-version-marker\">&nbsp;";

        // show this version entry
        echo "</td><td><a href=\"viewgame?version=$ivsn&id=$id\">
           v.$ivsn: {$idate}</a> - $iedlink<br>";
    }

    // the last version we show is always the first version
    echo "<div class=indented><span class=details>
        <i>Created page</i></span></div>";

    // end the history table and division
    echo "</td></tr></table></div>";

    } // if ($historyView)


    // -------------------------- DETAIL VIEW ------------------------------
    //
    if ($detailView) {

        // show other (non-editorial) special reviews
        $result = mysql_query(
            "select reviews.id as reviewid,
               rating, summary, review,
               date_format(moddate, '%M %e, %Y') as moddate,
               specialreviewers.id as special,
               specialreviewers.name as specialname,
               users.id as userid, users.name as username, location
             from reviews, specialreviewers, users
             where gameid = '$qid'
               and reviews.special = specialreviewers.id
               and users.id = reviews.userid
               and editorial = 0
               and ifnull(now() >= reviews.embargodate, 1)
             order by displayrank", $db);

        if (mysql_num_rows($result) != 0) {

            // start an indented section if we haven't already
            if (!$divStarted) {
                echo "<div class=indented>";
                $divStarted = true;
            }

            // show the reviews
            while ($row = mysql_fetch_array($result, MYSQL_ASSOC))
                showReview($db, $id, $row,
                           $specialNames, SHOWREVIEW_COLLAPSELONG | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));
        }

        // end the indented division if we started one
        if ($divStarted)
            echo "</div>";


//----------------------- MEMBER REVIEW SECTION ------------------------

        // query up the member reviews, sorted by helpfulness - for ordering
        // purposes, helpfulness is defined as helpful votes minus unhelpful
        // votes; this way, each unhelpful vote essentially cancels out a
        // helpful vote
        $result = mysql_query(
            $selectMemberReviews
            . " order by $orderByUserFilter, "
            . " netHelpful desc, moddate desc", $db);

        $rowcnt = mysql_num_rows($result);
        if ($rowcnt > 0) {

            // we have some reviews - start off the section
            $showcnt = $rowcnt;

            // show the Member Reviews section header
            $showHisto = !$should_hide;
            showMemberReviewsHeader($showHisto);

            // if we have too many for this front page, limit it
            if ($rowcnt > $reviewsOnHomePage) {
                echo "<h3>$reviewsOnHomePage Most Helpful Member Reviews</h3>";
                $showcnt = $reviewsOnHomePage;
            }

            // show the top reviews
            foreach (range(1, $showcnt) as $i) {
                // fetch the review
                $reviewRec = mysql_fetch_array($result, MYSQL_ASSOC);

                // show it
                showReview($db, $id, $reviewRec, $specialNames, SHOWREVIEW_COLLAPSELONG | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));
            }

            // show the link to the full list of reviews, if there are more
            if ($rowcnt > $reviewsOnHomePage) {
                echo "<div class=details><a href=\"viewgame?id=$id&reviews\">
                      See All $memberReviewCnt Member Reviews</a></div><br>";
            }

            // end the indented division
            echo "</div>";
        }
    
    } // if ($detailView)

    //--------------------------- EDITORIAL REVIEWS ---------------------------

    // we haven't started a nested division yet (we may or may not,
    // depending on what parts we end up displaying)
    $divStarted = false;

    // If we're showing the Detail view, show the special reviews and
    // a few of the top-rated (most helpful) member reviews.  The Detail
    // View page can get too long if we show all reviews, so we only
    // show a few, with a link to see the rest.
    //
    // In history view mode, show just the external reviews, since these
    // are edited as part of the page history.
    if ($detailView || ($historyView && count($extReviews) != 0)) {

        // ---------- Show the editorial reviews ------------

        // start with an empty string for the off-site review section
        $osr = "";

        // fetch the non-external editor reviews
        $srevs = array();
        if ($detailView) {
            // fetch the editorial review list
            $result = mysqli_execute_query($db,
                "select
                   r.rating as rating, r.summary as headline,
                   r.review as summary, sr.name as specialname, sr.code as code,
                   sr.displayrank as displayrank,
                   null as sourcename, null as sourceurl, null as url,
                   r.userid as userid, u.name as username
                 from
                   reviews as r
                   join specialreviewers as sr on sr.id = r.special
                   left outer join users as u on u.id = r.userid
                 where
                   r.gameid = ?
                   and sr.editorial != 0
                   and sr.code <> 'external'
                   and ifnull(now() >= r.embargodate, 1)
                 order by
                   sr.displayrank", [$id]);

            // collect the reviews
            $srevs = mysqli_fetch_all($result, MYSQL_ASSOC);
        }

        // merge the external reviews
        if ($extReviews) {
            // find the sorting position for the externals
            for ($i = 0 ; $i < count($srevs) ; $i++) {
                if ($srevs[$i]['displayrank'] > $extRevDisplayRank)
                    break;
            }

            // merge the arrays
            array_splice($srevs, $i, 0, $extReviews);
        }

        // see what we have
        if (count($srevs) != 0) {
            foreach ($srevs as $srev) {
                // get this row
                $rating = $srev['rating'];
                $headline = htmlspecialcharx($srev['headline']);
                $review = $srev['summary'];
                $specialname = $srev['specialname'];
                $code = $srev['code'];
                $xsrc = htmlspecialcharx($srev['sourcename']);
                $xsrcurl = $srev['sourceurl'];
                $xurl = $srev['url'];

                $stars = showStars($rating);

                $showBody = false;

                // clear out the buffer for building this row
                $txt = "";

                // show the review heading - this varies by review type
                if ($code == 'bafs' && $detailView) {

                    // Baf's Guide
                    $showBody = true;
                    $txt .= "<h3><a href=\"https://web.archive.org/web/20110100000000/https://www.wurb.com/if";
                    if (!isEmpty($bafsid))
                        $txt .= "/game/$bafsid";
                    $txt .= "\" title=\"Go to Baf's Guide to the IF Archive\">"
                            . "$specialname</a></h3>"
                            . "<div class=smallhead>$stars<br></div><p>";

                } else if ($code == 'external') {

                    // External review link

                    if ($stars && $headline)
                        $stars .= " ";

                    // generate the link to the source site
                    if ($xsrcurl)
                        $xlink = "<span class=xsrc>"
                                 . "<a href=\"$xsrcurl\">$xsrc</a>"
                                 . "</span>";
                    else
                        $xlink = "<span class=xsrc>$xsrc</span>";

                    if ($offsiteMode == 'L') {
                        // links-only mode

                        // start a new paragraph with the link
                        $txt .= "<a href=\"$xurl\">";

                        // if we have a rating or a headline, use that as
                        // the link to the off-site review; otherwise
                        // synthesize a title for the link
                        if ($stars && $headline)
                            $txt .= "$stars<b>$headline</b></a> - ";
                        else if ($stars)
                            $txt .= "$stars</a> <a href=\"$xurl\">Review</a>"
                                    . " at ";
                        else if ($headline)
                            $txt .= "$headline</a> - ";
                        else
                            $txt .= "A review</a> at ";

                        // add the site link
                        $txt .= "$xlink<br>";

                        // omit the body in this view
                        $showBody = false;

                    } else {
                        // full mode - include the headline and summary

                        // start the paragraph with the link to the main site
                        $txt .= "<p>$xlink<br>";

                        // if there's a rating or headline, it goes next
                        if ($stars || $headline)
                            $txt .= "$stars<b>$headline</b><br>";

                        // and we'll want to add the summary as the body
                        $showBody = true;
                    }

                    // show the body, unless we're in "links only" mode
                    // for external reviews
                    $showBody = ($offsiteMode != 'L');

                } else if ($detailView) {

                    // any other special review
                    $showBody = true;
                    $txt .= "<h3>$specialname</h3>"
                            . "<div class=smallhead>$stars<br></div>";

                }

                // show the review body if applicable
                if ($showBody)
                    $txt .= fixDesc($review, FixDescSpoiler);

                // for an external review, show the full-review link
                if ($code == 'external' && $offsiteMode != 'L') {
                    $txt .= "<br><span class=details><a href=\"$xurl\">"
                            . "See the full review</a></span>";
                }

                // If this is an external review, and we're showing
                // external reviews separately after the member review
                // section, add this to the string we're accumulating
                // for later display.
                if ($code == 'external' && $offsiteMode != 'A') {
                    // don't show now - accumulate for later
                    $osr .= $txt;
                } else {
                    // this is for immediate display
                    if (!$divStarted) {
                        if (count($srevs) === 1)
                            echo "<h2>1 Off-Site Review</h2>";
                        else
                            echo "<h2>".count($srevs)." Off-Site Reviews</h2>";

                        echo "<div class='indented readMore'>";
                        $divStarted = true;
                    }

                    echo $txt;
                }
            }
        }
    }

    if ($divStarted) {
        echo "<div class=expand><button>Read More</button></div>";
        echo "</div>";
    }

        // ---------------- News Section ----------------------------

        // if there's news, and we're in the detail view, show the news
        //
    if ($detailView) {
        newsSummary($db, "G", $qid, 3,
                    "<h2>News</h2><div class=indented>",
                    "</div>");

        // --------------- end News section ----------------

    //--------------------------- TAGS SECTION -----------------------------

        echo "<h2><a name=\"tags\"></a>Tags</h2><div class=indented>";

        ?>
        <style nonce="<?php global $nonce; echo $nonce; ?>">
            .viewgame__commonTags { margin-left: 1ex; }
            #myTagList { margin-right: 1ex; }
            #tagStatusSpan { margin-left: 1ex; }
            .viewgame__tagEditorContainer { position:relative;height:0px; }
            .viewgame__tagEditorHeader {
                position:relative;
                padding:2px;
                font-size:80%;
                text-align:center;
            }
            .viewgame__cancel {
                position:absolute;
                top:2px;
                right:0px;
                text-align:right;
            }
            #tagEditor form[name=tagForm], #tagDeletor form[name=tagForm] {
                padding:1ex 1ex 0.5ex 1ex;
                margin:0;
            }
            #editTagTable, #deleteTagTable {
                font-size:85%;
            }
            #myTagFld, #viewgame-add-tags-button {
                vertical-align: middle;
            }
            #viewgame-save-tags-button, #viewgame-save-tags-button-delete {
                margin-top: 1ex;
            }
        </style>

        <p><span id="tagPre" class=details></span>
        <span class='details viewgame__commonTags'>
           - <a href="/showtags?cloud=1&limit=100">View the most common tags</a>
           (<?php echo helpWinLink("help-tags", "What's a tag?")
           ?>)
        </span></p>
        <style nonce="<?php global $nonce; echo $nonce; ?>">
            .tagTable__container { max-width: 100%; }
        </style>
        <div class="readMore tagTable__container">
            <div id="tagTable" border=0 class=tags></div>
            <div class="expand"><button>Read More</button></div>
        </div>
        <?php
        if ($curuser) {
        ?>
            <span class=details>
               <b>Your tags:</b>
               <span id="myTagList"></span> -
               <a href="needjs" id="myTagList_edit">Edit</a>
            <?php if ($adminPriv) { ?>
               <a href="needjs" id="myTagList_delete">Delete</a>
            <?php } ?>

               <span class="xmlstatmsg"
                  id="tagStatusSpan"></span>
            </span>
        <?php
        } else {
            echo "<span class=details>"
                . "(<a href=\"login?dest=viewgame?id=$id%23tags\">Log in</a>"
                . " to add your own tags)</span>";
        }
        ?>

        <div class="viewgame__tagEditorContainer">
           <div id="tagEditor">
              <div class='viewgame__tagEditorHeader'>
                 <div>
                    <b>Edit Tags</b>
                 </div>
                 <div class='viewgame__cancel'>
                    <a href="needjs">Cancel<img src="img/blank.gif"
                          class="popup-close-button"></a>
                 </div>
              </div>
              <form name="tagForm" class="edittagsform" data-tag-button="add">
                 <script type="text/javascript" nonce="<?php global $nonce; echo $nonce; ?>">
                  document.currentScript.parentElement.addEventListener('submit', function (event) {
                    event.preventDefault();
                    addTags();
                  })
                </script>
                <span class=details>
                 <a href="/search?tag" target="_blank">Search all tags on IFDB</a> | <a href="/showtags" target="_blank">View all tags on IFDB</a>
                </span>
                <br><br>
                 <span class=details>Tags you added are shown below with
                    checkmarks.  To remove one of your tags, simply
                    un-check it.
                 </span>
                 <table id="editTagTable" border=0 class=tags>
                 </table>
                 <br>
                 <span class=details>
                 Enter new tags here (use commas to separate tags):<br>
                 </span>
                 <input type=text size=50 id="myTagFld">
                 <button class="fancy-button"
                    id="viewgame-add-tags-button"
                    name="addTags">Add</button>
                <br>
                 <button src="img/blank.gif" class="fancy-button"
                    id="viewgame-save-tags-button"
                    name="saveTags">Save Changes</button>
              </form>
           </div>
        </div>

<div class="viewgame__tagEditorContainer">
  <div id="tagDeletor">
     <div class='viewgame__tagEditorHeader'>
        <div>
           <b>Delete Tags</b>
        </div>
        <div class='viewgame__cancel'>
           <a href="needjs">Cancel<img src="img/blank.gif"
                 class="popup-close-button"></a>
        </div>
     </div>
     <form name="tagForm" data-tag-button="add">
        <span class=details></span>
        <table id="deleteTagTable" border=0 class=tags>
        </table>
        <button class="fancy-button"
           id="viewgame-save-tags-button-delete"
           name="saveTags">Save Changes</button>
     </form>
  </div>
</div>

<script type="module" nonce="<?php global $nonce; echo $nonce; ?>">
import {initTagTable} from './viewgame.js';

var dbTagList = [
<?php
        $isMine = ($curuser
                   ? "sum(userid = '$curuser' and gameid = '$qid')"
                   : "0");
        $result = mysql_query(
            "select
               tag,
               sum(gameid = '$qid') as tagcnt,
               count(distinct gameid) as gamecnt,
               $isMine as isMine
             from gametags
             group by tag
             having tagcnt != 0
             order by tag", $db);
        $cnt = mysql_num_rows($result);

        for ($i = 0 ; $i < $cnt ; $i++) {
            list($tag, $tagcnt, $gamecnt, $isMine) = mysql_fetch_row($result);
            $tag = jsSpecialChars($tag);
            echo ($i > 0 ? "," : "")
                . "{tag: \"$tag\", tagcnt: $tagcnt, "
                . "gamecnt: $gamecnt, isMine: $isMine}";
        }
?>
];

initTagTable("<?php echo $id ?>", dbTagList, <?php echo $adminPriv ?>);
//-->
</script>
        <?php

        echo "</div>";

    } // if ($detailView)

    // show the Game Details if we're in Detail or History view modes
    if ($detailView || $historyView) {
?>

         <h2>Game Details</h2>
         <div class=indented>
            <span class=notes>
               <?php if (!isEmpty($language))
                  echo "Language: " . htmlspecialcharx($language) . "<br>" ?>
               <?php if(!isEmpty($pubFull))
                  echo "First Publication Date: $pubFull<br>"; ?>
               Current Version: <?php
                  echo !isEmpty($version) ? htmlspecialcharx($version) : "<i>Unknown</i>"
               ?><br>
               <?php if (!isEmpty($license))
                   echo "License: $license<br>" ?>
               <?php if (!isEmpty($system))
                   echo "Development System: <a href=\"search?searchfor=system:" . urlencode($system) . "\">".htmlspecialchars($system)."</a><br>" ?>
               <?php if (!isEmpty($forgiveness))
                   echo helpWinLink("help-forgiveness", "Forgiveness Rating")
                       . ": $forgiveness<br>" ?>
               <?php
                    if (count($ifids) > 0) {
                        echo "<div id=\"ifwiki-link\" class=\"displayNone\"><a href=\"https://www.ifwiki.org/\">IFWiki</a>: <a href=\"https://www.ifwiki.org/index.php?title=IFID:"
                            .htmlspecialcharx($ifids[0])."\">$title</a><br></div>";
                        $jifid = htmlspecialcharx(str_replace("\"", "&#34;", $ifids[0]));
                        if (!$cssOverride) {
                        ?>
                        <script type="module" nonce="<?php global $nonce; echo $nonce; ?>">
                            if (await check_ifid_in_ifwiki("<?php echo $jifid ?>")) {
                                document.getElementById("ifwiki-link").style.display = "initial";
                            }
                        </script>
                        <?php
                        }
                    }
                ?>
               <?php if(!isEmpty($bafsid))
                   echo helpWinLink("help-bafs", "Baf's Guide ID")
                        . ":
                     <a class=silent
                      href=\"https://web.archive.org/web/20110100000000/http://www.wurb.com/if/game/$bafsid\"
                        title=\"Go to the Baf's Guide listing for this game\">
                        $bafsid</a>
                     <br>" ?>

            </span>
            <?php

$caption = helpWinLink("help-ifid", "IFID");

if (count($ifids) == 0 || isEmpty($ifids[0]))
    echo "<span class=notes>$caption: <i>Unknown</i></span><br>";
else if (count($ifids) == 1)
    echo "<span class=notes>$caption: ".htmlspecialcharx($ifids[0])."</span><br>";
else {
    echo "<table border=0 cellpadding=0 cellspacing=0>
        <tr><td><span class=notes>{$caption}s:&nbsp;</span></td>
        <td><span class=notes>".htmlspecialcharx($ifids[0])."</span></td></tr>";
    for ($i = 1 ; $i < count($ifids) ; $i++)
        echo "<tr><td></td><td><span class=notes>".htmlspecialcharx($ifids[$i])."</span></td></tr>";
    echo "</table>";
}
            ?>
            <span class=notes>
              <?php echo helpWinLink("help-tuid", "TUID");
                 ?>:
                 <?php echo htmlspecialcharx($id) ?>
            </span><br>

            <?php
// show the outbound references, if any
if (count($xrefs) != 0) {
    echo "<br>";
    foreach ($xrefs as $x) {
        $x['author'] = collapsedAuthors($x['author']);
        $fn = $x['fromname'];
        $fn = str_replace(array("<language>", "<system>"),
                          array($languageNameOnly, $system),
                          $fn);
        echo "<span class=notes>" . initCap($fn)
            . " <a href=\"viewgame?id={$x['toID']}\"><i>{$x['toTitle']}</i></a>"
            . ", by {$x['author']}</span><br>";
    }
}

// show the inbound references, if any
if (count($inrefs) != 0 && !$historyView) {
    echo "<br>";
    for ($i = 0 ; $i < count($inrefs) ; ) {
        $x = $inrefs[$i];
        for ($j = $i + 1 ;
             $j < count($inrefs) && $inrefs[$j]['reftype'] == $x['reftype'] ;
             $j++) ;

        $cnt = $j - $i;
        if ($cnt > 1) {
            echo "<span class=notes>" . initCap($x['tonames'])
                . ":</span><br><div class=\"indented\">";
        } else {
            $toname = str_replace(
                array('<language>', '<system>'),
                array($x['language'], $x['system']),
                $x['toname']);
            echo "<span class=notes>" . initCap($toname) . " </span>";
        }

        for ( ; $i < $j ; ++$i) {
            $x = $inrefs[$i];
            $x['author'] = collapsedAuthors($x['author']);
            echo "<span class=notes>"
                . "<a href=\"viewgame?id={$x['fromid']}\">"
                . "<i>{$x['title']}</i></a>"
                . ", by {$x['author']}</span><br>";
        }

        if ($cnt > 1)
            echo "</div>";
    }
}
            ?>

         </div>

<?php
    // ---------- end Game Detail section ------------

    } // if ($detailView)


//------------------------ CROSS-RECOMMENDATIONS --------------------------
//
// Show recommendations in the Detail and Recommendations views.
//
// If we have any recommended lists mentioning the game, or any
// cross-recommendations for games, list them
    if ($detailView || $recView) {

        // show the header if (a) we have any recommendations to show,
        // or (b) we're in the explicit Recommendations view mode - in
        // the latter case, since the user asked for recommendations,
        // show the header even if we don't have anything to list
        $divStarted = false;
        if (!$crossrecs && !$ecrossrecs
            && !$recView && ($lists || $polls)) {
            $divStarted = true;
            echo "<h2><i>$title</i> on IFDB</h2>"
                . "<div class=indented>";
        }
        else if ($lists || $polls || $crossrecs || $ecrossrecs || $recView) {
            $divStarted = true;
            echo "<h2>If you enjoyed <i>$title</i>...</h2>"
                . "<div class=indented>";
        }

        // if we have recommendations, show them
        if ($lists || $polls || $crossrecs || $ecrossrecs) {

            // display the cross-recommendations for games
            if ($crossrecs || $ecrossrecs) {
                echo "<h3>Related Games</h3>";

                $these = (count($ecrossrecs) + count($crossrecs) == 1
                          ? "this game" : "these games");

                if ($ecrossrecs && $crossrecs && count($ecrossrecs) < 3) {
                    echo "Other members recommend $these for "
                        . "people who like <i>$title</i>, or gave both "
                        . "high ratings:";
                } else if ($ecrossrecs) {
                    echo "Other members recommend $these for "
                        . "people who like <i>$title</i>:";
                } else {
                    echo "People who like <i>$title</i> also gave high "
                        . "ratings to $these:";
                }

                echo "<div class=indented>";

                // merge the two arrays, starting with explicit suggestions
                $allrecs = array_merge($ecrossrecs, $crossrecs);

                // show up to three items
                $allcnt = min(count($allrecs), 3);
                for ($i = 0 ; $i < $allcnt ; $i++) {
                    // get this item
                    $c = $allrecs[$i];

                    // format the data for display
                    $crid = mysql_real_escape_string($c['id'], $db);
                    $crtitle = htmlspecialcharx($c['title']);
                    $crauthor = htmlspecialcharx($c['author']);
                    $crdescInfo = summarizeHtml($c['desc'], 240);
                    $crdesc = fixDesc($crdescInfo[0]);
                    $crart = $c['hasart'];
                    $crversion = $c['pagevsn'];

                    $gameRatingsView = getGameRatingsView($db);
                    $result = mysql_query(
                        "select avgRating, numRatingsInAvg, numRatingsTotal
                         from $gameRatingsView
                         where gameid = '$crid'", $db);
                    if ($result)
                        list($crravg, $crrcnt, $crrtot) =
                            mysql_fetch_row($result);
                    else
                        $crravg = $crrcnt = $crrtot = 0;

                    echo "<p>";
                    if ($crart)
                        echo "<table class=grid cellspacing=0 cellpadding=0 "
                            . "border=0><tr><td>"
                            . "<a href=\"viewgame?id=$crid\">"
                            . coverArtThumbnail($crid, 80, $crversion)
                            . "</a></td><td>";

                    echo "<a href=\"viewgame?id=$crid\"><b>$crtitle</b></a>"
                        . ", by $crauthor<br>";

                    if ($crrcnt)
                        echo "<span class=details>"
                            . "Average member rating: " .showStars($crravg)
                            . " ($crrcnt rating" . ($crrcnt == 1 ? "" : "s")
                            . ")</span><br>";

                    echo "<span class=details>$crdesc</span>";

                    if ($crart)
                        echo "</td></tr></table>";
                }

                echo "<p><span class=details>";
                if (count($ecrossrecs) > 3) {
                    echo "<a href=\"crossrec?game=$id\">"
                        . "See more suggestions</a> - ";
                }
                echo "<a href=\"crossrec?game=$id&edit\">"
                    . ($myCrossRecs ?
                       "View or edit my suggestions ($myCrossRecs)" :
                       "Suggest a game")
                    . "</a></span>"

                    . "</div>";
            }

            // display the lists
            if ($lists) {
                echo "<h3>Recommended Lists</h3>"
                    . "<i>$title</i> appears in the "
                    . "following Recommended Lists:"
                    . "<div class=indented>";

                for ($i = 0 ; $i < 3 && $i < count($lists) ; $i++) {
                    // format the list data for display
                    $l = $lists[$i];
                    $listid = $l['listid'];
                    $listname = htmlspecialcharx($l['title']);
                    $listdescInfo = summarizeHtml($l['desc'], 240);
                    $listdesc = fixDesc($listdescInfo[0]);
                    $listuserid = $l['userid'];
                    $listusername = htmlspecialcharx($l['username']);

                    // display it
                    echo "<p><a href=\"viewlist?id=$listid\">"
                        . "<b>$listname</b></a>"
                        . " by <a href=\"showuser?id=$listuserid\">"
                        . "$listusername</a><br>"
                        . "<span class=notes>$listdesc</span>";
                }

                if (count($lists) > 3)
                    echo "<p><span class=details>"
                        . "<a href=\"alllists?game=$id\">See all lists "
                        . "mentioning this game</a></span>";

                echo "</div>";
            }

            // display the polls
            if ($polls) {
                echo "<h3>Polls</h3>"
                    . "The following polls include votes for <i>$title</i>:"
                    . "<div class=indented>";

                for ($i = 0 ; $i < 3 && $i < count($polls) ; $i++) {
                    // format the poll data for display
                    $p = $polls[$i];
                    $pollid = $p['pollid'];
                    $pollname = htmlspecialcharx($p['title']);
                    $polldescInfo = summarizeHtml($p['desc'], 240);
                    $polldesc = fixDesc($polldescInfo[0]);
                    $polluserid = $p['userid'];
                    $pollusername = htmlspecialcharx($p['username']);

                    // display it
                    echo "<p><a href=\"poll?id=$pollid\"><b>$pollname</b></a>"
                        . " by <a href=\"showuser?id=$polluserid\">"
                        . "$pollusername</a><br>"
                        . "<span class=notes>$polldesc</span>";
                }

                if (count($polls) > 3)
                    echo "<p><span class=details>"
                        . "<a href=\"allpolls?game=$id\">"
                        . "See all polls with votes for this game</a></span>";

                echo "</div>";
            }

        } else if ($recView) {

            // We're explicitly in the Recommendations view, but we don't
            // have any recommendations to show.

            // check to see if we've reviewed this game
            $reviewIt = false;
            if ($curuser) {
                $result = mysql_query(
                    "select id from reviews
                     where gameid='$qid' and userid='$curuser'", $db);
                if (mysql_num_rows($result) > 0) {
                    $reviewIt = "rating a few other games you like";
                }
            }
            if (!$reviewIt) {
                $reviewIt = "rating this game and a few other games "
                            . "you also like";
            }

            ?>
            IFDB doesn't currently have any recommendations for
            similar games.  Our recommendations depend on input
            from our members, so you can help!  If you know of other
            games that you'd recommend to people who liked
            <i><?php echo $title ?></i>, you can help by...

            <ul class=doublespace>
               <li><a href="editlist?id=new">creating a Recommended
                  List</a> that includes <i><?php echo $title ?></i> and
                  other games you like for similar reasons;

               <li><?php echo $reviewIt ?>.
            </ul>

            <p>We use member ratings and Recommended Lists to
            offer suggestions, so the more input our members provide,
            the better IFDB's suggestions will become.

            <?php
        }

        // end the indented division if we started it
        if ($divStarted)
            echo "</div>";

        if ($recView)
            echo "<p><a href=\"viewgame?id=$id\">Go to the "
                . "main page for this game</a>";

    } // if ($detailView || $recView)


//------------------ OFF-SITE REVIEWS ("BELOW" MODE) ---------------------
//
// Off-site reviews, if the preferences are set to 'B' (show below
// member reviews) or 'L' (show links only below member reviews)
    if ($detailView && $osr && ($offsiteMode == 'B' || $offsiteMode == 'L')) {

        echo "<h2>Off-Site Reviews</h2>"
            . "<div class=indented>$osr</div>";

    } // if (off-site "below" mode)


//-------------------------- RSS FEEDS ---------------------------

    if ($detailView) {

?>

<h2>RSS Feeds</h2>
<a href="viewgame?id=<?php echo $id ?>&reviews&rss">
    <img src="img/blank.gif" class="rss-icon">New member reviews</a>
<br><a href="viewgame?id=<?php echo $id ?>&downloads&rss">
    <img src="img/blank.gif" class="rss-icon">Updates to external links</a>
<br><a href="viewgame?id=<?php echo $id ?>&news&rss">
    <img src="img/blank.gif" class="rss-icon">All updates to this page</a>

<?php

    }

//-------------------------- DETAIL VIEW FOOTER ---------------------------
    if ($detailView) {

        // if this is our page, and we own all the versions, offer
        // deletion
        $deletePageLink = "- <a href=\"delgame?id=$id\">Delete This Page</a>";

        // add the footer showing the version/edit links
        $editedby =
            ($editedbyname
             ? ("edited by <a href=\"showuser?id=$editedbyid\">"
                . "$editedbyname</a>")
             : "last edited");
        echo "<br clear=all><br>
           <hr class=dots>
           <span class=notes>
              <i>This is version $pagevsn of this page, $editedby
                 on $moddate.</i>
              - <a href=\"viewgame?history&id=$id\">View Update History</a>
              - <a href=\"editgame?&id=$id\">Edit This Page</a>
              - <a href=\"editnews?type=G&source=$id\">Add a News Item</a>
              $deletePageLink
           </span>";

    } // if ($detailView)

//----------------------------- ONE-REVIEW VIEW ---------------------------

    // if we're showing a single review, show it
    if ($oneReviewView) {

        // make it easy to return to the overview page
        echo "<br><span class=notes><a href=\"viewgame?id=$id\">Go to the
            game's main page</a></span><br>";

        // query the review by ID
        $reviewID = get_req_data('review');
        $result = mysql_query(
            getReviewQueryByReview($db, $reviewID), $db);

        // fetch the review
        $reviewRec = mysql_fetch_array($result, MYSQL_ASSOC);
        $reviewAuthor = $reviewRec['userid'];

        if (mysql_num_rows($result) == 0) {
            echo "The requested review does not exist.";
        } else {

            // start the section
            showMemberReviewsHeader(false);

            // Show our single review.  Only show the "Add Comment"
            // button for the comment controls, since we're going to
            // list the comments below and thus don't need the control
            // to show more of them.
            showReview($db, $id, $reviewRec, $specialNames,
                       SHOWREVIEW_COMMENTCTLSADDONLY | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));

            // end the nested division that the header opens
            echo "</div>";

            // show the comments
            $qReviewID = mysql_real_escape_string($reviewID, $db);
            showCommentPage($db, $reviewAuthor, $qReviewID, "R",
                            "viewgame?id=$id&review=$reviewID",
                            "reviewcomment?review=$reviewID",
                            25, "Comments on this review", "comments");
        }

    }

//--------------------------- SEE-ALL-REVIEWS VIEW -------------------------

    // if we're showing the Review View, show 10 member reviews
    if ($reviewView) {

        // number per page
        $per_page = ($ratingsView ? 25 : 10);
        $pgAll = false;

        $limit = "";
        if ($reviewPage == 'all') {
            $pgAll = true;
            $reviewPage = 1;
        } else {
            $reviewPage = (int)$reviewPage;
        }

        // calculate the row number of the first review on the page
        $firstOnPage = ($reviewPage - 1) * $per_page;

        // figure the page limits, if not viewing all
        if (!$pgAll)
            $limit = "limit $firstOnPage, $per_page";

        // sorting option mapping - "sortby" <select> list to ORDER BY clause
        $orderByMap = array(
            'new' => array('moddate desc', 'Newest First'),
            'old' => array('moddate', 'Oldest First'),
            'hlp' => array('netHelpful desc', 'Most Helpful First'),
            'unh' => array('netHelpful', 'Least Helpful First'),
            'hi' => array('rating desc', 'Highest Ratings First'),
            'lo' => array('rating', 'Lowest Ratings First'));

        // build the query that gives us the right sorting order
        $sortReq = get_req_data('sortby');
        $orderBy = isset($orderByMap[$sortReq])
                   ? $orderByMap[$sortReq][0] : "moddate desc";

        // if it's a helpfulness query, apply the user filter ordering
        if ($sortReq == 'hlp')
            $orderBy = "$orderByUserFilter, $orderBy";
        else if ($sortReq == 'unh')
            $orderBy = "$orderByUserFilter desc, $orderBy";

        // pick the appropriate base query
        $query = ($ratingsView ? $selectMemberRatings : $selectMemberReviews);

        // run the query
        $result = mysql_query(
            "$query order by $orderBy, moddate desc $limit", $db);

        // get the query total - it might differ from the overall total
        // due to plonking or other filters
        $realtotcnt = ($ratingsView ? $ratingCntTot : $memberReviewCnt);
        $result2 = mysql_query("select found_rows()", $db);
        list($totcnt) = mysql_fetch_row($result2);

        // if viewing all, make the page limit equal to the actual count
        if ($pgAll)
            $per_page = $totcnt;

        // figure the number of pages that gives us
        $lastPage = (int)floor(($totcnt + $per_page - 1)/$per_page);
        if ($reviewPage > $lastPage)
            $reviewPage = $lastPage;

        // calculate the last on the page
        $lastOnPage = $firstOnPage + $per_page - 1;
        if ($lastOnPage > $totcnt - 1)
            $lastOnPage = $totcnt - 1;

        // make it easy to return to the overview page
        echo "<br><span class=notes><a href=\"viewgame?id=$id\">Return to the
            game's main page</a></span><br>";

        $showHisto = !$should_hide;

        // start the section
        showMemberReviewsHeader($showHisto);

        // show the reviews/ratings only if we have any
        if ($totcnt != 0) {

            // show the sorting controls
            showSortingControls("reviewOrder", "sortby", $orderByMap, $sortReq,
                                array("id" => $id, "reviews" => "1",
                                      "ratings" => $ratingsView),
                                "viewgame");

            // generate the page navigation controls
            $pageCtl = "<span class=details>"
                       . makePageControl(
                           "viewgame?id=$id&reviews&sortby=$sortReq"
                           . ($ratingsView ? "&ratings" : ""),
                           $reviewPage, $lastPage,
                           $firstOnPage, $lastOnPage, $totcnt,
                           $totcnt > 20, true, $pgAll)
                       . "</span>";

            // show the page controls at the top of the review list
            echo "$pageCtl<br><br><br>";

            // now show the reviews
            for ($i = $firstOnPage ; $i <= $lastOnPage ; $i++) {
                showReview($db, $id, mysql_fetch_array($result, MYSQL_ASSOC),
                           $specialNames, 0 | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));
            }

            // show the page controls again at the bottom of the review list
            echo "<br>$pageCtl<span class=details> | "
                . "<a href=\"viewgame?id=$id\">Return to game's main page"
                . "</a></span><br><br>";
        }

        // end the indented division started in the review header
        echo "</div>";

    } // if ($reviewView)

    echo "</div>"; // viewgame-body
} // if $(errMsg)

pageFooter();

?>
