<?php

include_once "session-start.php";

// make sure we process any persistent login state
include_once "login-persist.php";
$curuser = checkPersistentLogin();

include_once "pagetpl.php";
include_once "util.php";
include "starctl.php";
include_once "rss.php";
include_once "game-rss.php";
include_once "gameinfo.php";
include_once "commentutil.php";
include_once "news.php";

$db = dbConnect();
$curuser = checkPersistentLogin();

// check the user for ADMIN privileges and sandbox setting
$userprivs = $adminPriv = false;
$mysandbox = 0;
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select `privileges`, `sandbox` from users where id=?", [$curuser]);
    list($userprivs, $mysandbox) = mysql_fetch_row($result);
    $adminPriv = (strpos($userprivs, "A") !== false);
}

$errMsg = false;
$errCode = false;
$title = "Game Details";
$detailView = false;
$recView = false;
$historyView = false;
$reviewView = false;
$ratingsView = false;
$oneReviewView = false;
$downloadsView = false;
$myCrossRecs = 0;

// note if we're on IE6
$userAgent = $_SERVER['HTTP_USER_AGENT'];
$ie6 = preg_match("/; msie 6\./i", $userAgent);

// Zero-Width Space: for IE6, use &shy;, otherwise use &#8203;.  (The latter
// is the unicode zero-width space character, which allows a line break but
// is otherwise invisible.  &shy; is the soft hyphen, which is invisible most
// of the time but allows a line break, and is rendered as a hyphen if the
// renderer does elect to put a line break there.  IE6 doesn't handle the
// unicode zwsp; the other browsers, including IE7, do.)
$zwsp = ($ie6 ? "&shy;" : "&#8203;");

if (isset($_REQUEST['cssOverride']))
    $cssOverride = get_req_data('cssOverride');

// connect to the database
include_once "dbconnect.php";
$db = dbConnect();

// retrieve the special reviewer names
include_once "reviews.php";
$specialNames = initSpecialNames($db);

// cache the IF Archive mirror mapping, if any
include "mirrorUrl.php";

// presume the default layout preferences: show off-site reviews with
// summaries in the Editorial Review section
$offsiteMode = 'A';

// if we're logged in, get the user's miscellaneous layout preferences
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select offsite_display from users where id = ?", [$curuser]);
    if (mysql_num_rows($result) != 0)
        list($offsiteMode) = mysql_fetch_row($result);

    // if it's not set, default to 'A'
    if (strlen($offsiteMode) != 1 || strpos("ABLN", $offsiteMode) === false)
        $offsiteMode = 'A';
}

// ------------------------------------------------------------------------
// get a footnote indicator for the given footnote number
//
function getFootnoteStar($num)
{
    $f = array("*", "&dagger;", "&Dagger;");
    if ($num <= 0)
        return "";
    else if ($num <= count($f))
        return $f[$num-1];
    else
        return str_repeat("*", 2 + $num - count($f));
}

// ------------------------------------------------------------------------
// get the game ID - it can be given as an IFID via ?ifid=xxx, or as an
// internal ID via ?id=xxx
function getID() {
    global $db, $errMsg, $errCode;

    $id = false;
    if (isset($_REQUEST['ifid'])) {
        // We have an IFID - look up our corresponding internal ID.  Note
        // that letters in IFIDs are always upper-case; we store them in
        // the database this way, so capitalize the request string before
        // looking it up.
        $qifid = strtoupper($_REQUEST['ifid']);
        $result = mysqli_execute_query($db, "select gameid from ifids
            where ifid = ?", [$qifid]);

        // make sure we found a match
        if (mysql_num_rows($result) == 0) {
            $errMsg = "No game was found matching the requested IFID.";
            $errCode = "notFound";
            return null;
        }

        // get the ID from the record
        $id = mysql_result($result, 0, "gameid");
    } else if (isset($_REQUEST['id'])) {
        // there's no IFID, so use the internal ID number
        $id = $_REQUEST['id'];
    }

    // return the ID we found
    return $id;
}

// --------------------------------------------------------------------------
function sendCoverArt()
{
    global $errMsg, $db;

    if (localImageCredentials() === null) {
        header("HTTP/1.1 302 Found");
        header("Location: https://" . PRODUCTION_SERVER_NAME . $_SERVER['REQUEST_URI']);
        exit();
    }

    // get the ID
    $id = getID();
    if (is_null($id))
        exit($errMsg);

    // look up the game
    $result = mysqli_execute_query($db,
        "select coverart, title, pagevsn from games where id = ?", [$id]);
    if (mysql_num_rows($result) == 0) {
        checkRedirect($id);
        exit("No game record found for ID");
    }

    // retrieve the image
    list($imgname, $title, $pagevsn) = mysql_fetch_row($result);

    if (isset($_REQUEST['version'])) {
        header("Cache-Control: public, max-age=31536000, immutable");
    }

    // get the target version from the request
    $targVsn = (isset($_REQUEST['version'])
                && (int)$pagevsn != (int)($_REQUEST['version']))
               ? (int)($_REQUEST['version']) : false;

    // if we're retrieving an old version, go back and find it
    if ($targVsn) {
        // query up the old versions from newest to oldest
        $result = mysqli_execute_query($db,
            "select pagevsn, deltas
            from games_history
            where id = ?
            order by pagevsn desc", [$id]);

        // scan for a version that overrides the current definition
        $rows = mysql_num_rows($result);
        $foundvsn = false;
        while ($rec = mysql_fetch_array($result, MYSQL_ASSOC)) {

            // deserialize the deltas
            $deltas = unserialize($rec['deltas']);

            // if this entry defines artwork, use the override
            if (isset($deltas['coverart']))
                $imgname = $deltas['coverart'];

            if (isset($deltas['title']))
                $title = $deltas['title'];

            // stop if this is the version we're looking for
            if ((int)$rec['pagevsn'] == $targVsn)
            {
                $foundvsn = true;
                break;
            }
        }

        // if we didn't find the requested version, give up
        if (!$foundvsn)
            exit("The requested version of the art image wasn't found");
    }

    // generate the ldesc page if applicable
    if (isset($_REQUEST['ldesc']))
        sendImageLdesc("Cover Art for $title"
                       . ($targVsn ? " (version $targVsn)" : ""),
                       $imgname);

    // retrieve the image data
    list($imgdata, $fmt) = fetch_image($imgname, true);

    // get the thumbnail setting
    $thumbnail = (isset($_REQUEST['thumbnail'])
                  ? $_REQUEST['thumbnail'] : null);

    // send it
    sendImage($imgdata, $fmt, $thumbnail);
}

// --------------------------------------------------------------------------
// display the Member Review section header
//
function showMemberReviewsHeader($showHisto)
{
    global $memberReviewCnt, $ratingsView, $reviewView, $oneReviewView, $ratingAvg, $ratingCntAvg, $ratingHisto, $id, $currentUserReview, $curuser;

    $heading = "Ratings and Reviews";
    if ($ratingsView) {
        $heading = "All Member Ratings";
    } else if ($reviewView) {
        $heading = "All Written Member Reviews";
    } else if ($oneReviewView) {
        $heading = "Review";
    }

    // start the section
    echo "<a name='memberReviews'></a>"
        . "<h2>$heading</h2><div class=indented>";

    // count the ratings in the histogram, and get the maximum
    for ($cnt = $max = 0, $i = 1 ; $i <= 5 ; $i++) {
        $cur = $ratingHisto[$i];
        $cnt += $cur;
        if ($cur > $max)
            $max = $cur;
    }

    // show the histogram if desired
    if ($showHisto && $cnt > 1) {
        global $nonce;
        echo "<style nonce='$nonce'>\n"
            . ".viewgame__histogramEnd { padding-left: 2em; }\n"
            . "</style>\n";
        echo "<table border=0 cellspacing=0 cellpadding=0><tr valign=top>"
            . "<td valign=top>"
            . "<table class=ratingHistogram border=0 cellspacing=0 cellpadding=0>";

        // show the histogram
        for ($i = 5 ; $i >= 1 ; $i--) {
            $num = $ratingHisto[$i];
            $pct = (int)($num*100 / $max);
            echo "<tr><td>$i&nbsp;star:</td>"
                . "<td><div class=ratingHistoBox>"
                . "<div class='ratingHistoBar ratingHistoBar$i'>"
                . "<style nonce='$nonce'>\n"
                . ".ratingHistoBar$i { width: $pct%; }\n"
                . "</style>\n"
                . "</div></div></td>"
                . "<td align=right>($num)</td></tr>";
        }

        echo "</table></td><td class=\"viewgame__histogramEnd\" valign=top>";
        echo "<div class=details>Average Rating: "
            . showStars($ratingAvg)
            . " based on $ratingCntAvg ratings<br>"
            . "Number of Reviews Written by IFDB Members: $memberReviewCnt<br></div>";
    }

    if ($currentUserReview || !$oneReviewView) {
        echo "<div class=details><a href=\"review?id=$id&userid=$curuser\">"
            . ($currentUserReview ? "Revise your review" : "Write a review")
            . "</a>"
            . "</div>";
    }

    // finish the histogram table if applicable
    if ($showHisto) {
        echo "</td></tr></table>";
    }
}

// ------------------------------------------------------------------------
// Convert a list of (place, division) names to a printable award list.
// We'll make the list into a semicolon-separated list of "place, division"
// items.  The "Main" division has special handling: if it's the only
// award, we omit any mention of the division at all, otherwise we call
// it "Overall".
function awardList($awards)
{
    // check for a "main" division
    $names = [];
    foreach ($awards as $a)
    {
        if ($a[1] == "Main")
        {
            // if this is the only item, leave out the division name
            // entirely, since it's just the place in the overall
            // competition; otherwise explicitly call it the "Overall"
            // division
            if (count($awards) == 1)
                $names[] = $a[0];
            else
                $names[] = "{$a[0]} overall";
        }
        else
        {
            // make the name: "Place, Division"
            $names[] = "{$a[0]}, {$a[1]}";
        }
    }

    // return the semicolon-separated list
    return implode("; ", $names);
}

// ----------------------- COVER ART HANDLING ------------------------
//
// if we're being asked for a cover art image, send that instead of
// serving up the game page
if (isset($_REQUEST['coverart'])) {
    // send the image
    sendCoverArt();

    // we only wanted the cover art image, so we're done now
    exit();
}

// initialize - this fetches the database record for the game we're
// being asked to display
function init()
{
    global $db, $id, $qid, $errMsg, $errCode;

    // make sure we're connected
    if ($db == false) {
        $errMsg = "An error occurred connecting to the game database. Please
          try refreshing the page. If the error persists,
          <a href=\"/contact\">contact us</a> to let us know about
          the problem.";
        $errCode = "dbError";
        return;
    }

    // check the game ID
    $id = getID();
    if (!$id) {
        if (!$errMsg) {
            $errMsg = "No game was specified in the request.";
            $errCode = "badRequest";
        }
        return;
    }

    // get the quoted ID
    $qid = mysql_real_escape_string($id, $db);
}
init();

// load the game information
$reqVersion = $_REQUEST['version'] ?? null;
if (!$errMsg) {
    list($ifids, $title, $author, $authorExt,
         $pubYear, $pubFull, $license,
         $system, $desc, $rawDesc,
         $hasart, $genre, $seriesname, $seriesnum,
         $forgiveness, $bafsid, $version,
         $language, $languageNameOnly,
         $website, $links,
         $ratingCntAvg, $ratingCntTot, $ratingAvg, $memberReviewCnt,
         $currentUserRating, $currentUserReview,
         $editedbyid, $editedbyname, $moddate, $moddate2, $pagevsn,
         $moddatelatest,
         $historyView,
         $dlnotes, $extReviews, $extRevDisplayRank,
         $ratingHisto, $xrefs, $inrefs, $flags) =
             getGameInfo($db, $id, $curuser, $reqVersion, $errMsg, $errCode);
    $title = htmlspecialchars($title);
    $license = htmlspecialchars($license);
    $language = htmlspecialchars($language);
    $seriesnum = htmlspecialchars($seriesnum);
    $forgiveness = htmlspecialchars($forgiveness);

    $should_hide = ($flags & FLAG_SHOULD_HIDE);

}

// check for an explicit redirect from this TUID to another TUID
function checkRedirect($id)
{
    global $db;
    $result = mysqli_execute_query($db,
        "select fwdgameid from gamefwds where gameid = ?", [$id]);
    if (mysql_num_rows($result) > 0)
    {
        // get the target game
        list($toID) = mysql_fetch_row($result);

        // build the redirect string with all of the original URL parameters
        $redir = "viewgame?id=$toID";
        foreach ($_GET as $key => $val) {
            if (strcasecmp($key, "id") != 0) {
                $val = urlencode(get_req_data($key));
                $redir .= "&$key" . ($val ? "=$val" : "");
            }
        }

        header("HTTP/1.1 301 Moved Permanently");
        header("Content-Type: text/html");
        header("Location: $redir");

        echo "The listing you requested was a duplicate. Your browser should "
            . "automatically take you to the original in a moment. "
            . "(<a href=\"$redir\">Click here</a> if your "
            . "browser doesn't load the new page automatically.)";

        exit();
    }
}

if ($errCode == "notFound") {
    checkRedirect($id);
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "versionNotFound") {
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "dbError") {
    header("HTTP/1.1 500 Internal Server Error");
} else if ($errCode == "badRequest") {
    header("HTTP/1.1 400 Bad Request");
}

// Member review query - this selects REVIEWS (not just ratings, so
// the 'review' field can't be null), BY MEMBERS (i.e., not special
// reviews, so 'special' must be null).
$selectMemberReviews = getReviewQueryByGame(
    $db, $id, "reviews.review is not null and reviews.special is null");

// Rating query - this selects RATINGS (so the 'rating' field must
// not be null), BY MEMBERS (i.e., not special
// reviews, so 'special' must be null), excluding "omitted" reviews
// ("omit this review from the average", rflags 2)
// We'll also include reviews in this list, so it's
// okay for the review field to be non-null.  If we wanted ONLY
// ratings and not any reviews, we'd also require 'review is null'.
$selectMemberRatings = getReviewQueryByGame(
    $db, $id, "reviews.rating is not null and reviews.special is null " .
        "and not(ifnull(`ifdb`.`reviews`.`RFlags`, 0) & 2)"
);


// --------------------Finding the median play time--------------------------

// Find the median of the numbers in an array
function findMedian($array_input) {
    if (!is_array($array_input)) return false;
    if (!$array_input) return 0;
    // Sort the entries in the array
    sort($array_input);
    // Divide the number of entries by two
    $total_entries = count($array_input);
    $half = $total_entries / 2;
    $int_half = (int) $half;                   // Find just the integer part of a number, in case it's not a whole number

    // Calculate median
    if ($total_entries % 2 != 0) {             // Dividing by 2 gives a remainder, so the array must have an odd number of entries
        $median = $array_input[$int_half];     // Choose the middle entry
    } else {                                   // The array has an even number of entries, so there will be two middle entries
        $middle1 = $array_input[$int_half-1];  // Find the first middle entry
        $middle2 = $array_input[$int_half];    // Find the second middle entry
        $median = ($middle1 + $middle2) / 2;
    }
    return $median;
}


// Get all of the estimated play times for this game, and put them in an array
$result = mysqli_execute_query($db, "select playertimes.id as player_time_id, time_in_minutes, time_note, userid, name from playertimes inner join users on playertimes.userid = users.id where gameid = ?", [$id]);
if (!$result) throw new Exception("Error: " . mysqli_error($db));
$alltimes = mysqli_fetch_all($result, MYSQLI_ASSOC);

// Find the median play time (in minutes) for this game
$mediantime = findMedian(array_map(fn($row) => $row['time_in_minutes'], $alltimes));

// When we display the official estimated time for a game, we want to round to the 
// nearest 5 minutes when the game is longer than 1 hour.
$rounded_median_time = 0;
if ($mediantime > 60) {
    // The game is over an hour, so round to the nearest 5 minutes. 
    $rounded_median_time =  round( $mediantime / 5 ) * 5;
} else {
    // The game is an hour or less, so round to the nearest minute.
    $rounded_median_time = round($mediantime);
}

//----------------End finding median play time------------------

//----------------Begin Play Online link stuff-------------------

// Create a play online URL for a link from $links
function constructPlayOnlineURL($link) {
    $isGameLink = false;
    $onlineInterpreterType = ""; // Options: "HTML", "Parchment", "ADRIFT". There was a HEX option, but it didn't seem like it was being used.
    $playOnlineURL = "";
 
    // if it's a game, note that we found a game link
    if ($link['isgame'])
        $isGameLink = true;

    $unboxUrl = false;
    if ($link['compression'] && $link['compressedprimary']) {
        $open = urlencode($link['compressedprimary']);
        if (preg_match('!^https?://(www\.|mirror\.)?ifarchive\.org/!', $link['url'])) {
            $linkUrl = urlencode($link['url']);
            $unboxUrl = "https://unbox.ifarchive.org/?url=$linkUrl&open=$open";
        } else {
            $springThingUrl = preg_replace('!^https?://(www\.)?springthing\.net/(\d+)/files/(.*)$!',
                'https://ifarchive.org/if-archive/games/springthing/$2/$3', $link['url']);
            if ($springThingUrl !== $link['url']) {
                $springThingUrl = urlencode($springThingUrl);
                $unboxUrl = "https://unbox.ifarchive.org/?url=$springThingUrl&open=$open";
            } else {
                $springThingUrl = preg_replace('!^https?://(www\.)?springthing\.net/(\d+)/stories/[^/]+/(.*)$!',
                    'https://ifarchive.org/if-archive/games/springthing/$2/$3', $link['url']);
                if ($springThingUrl !== $link['url']) {
                    $springThingUrl = urlencode($springThingUrl);
                    $unboxUrl = "https://unbox.ifarchive.org/?url=$springThingUrl&open=$open";
                }
            }
        }
    }

    if ($link['fmtexternid'] == 'hypertextgame')
    {
        if (!$link['compression']) {
            $onlineInterpreterType = "HTML";
            $playOnlineURL = $link['url'];
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        } else if ($unboxUrl) {
            $onlineInterpreterType = "HTML";
            $playOnlineURL = $unboxUrl;
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        }
    }

    if (stripos($link['title'], "Play Online") !== false)
    {
        $isGameLink = true;
        $onlineInterpreterType = "HTML";
        $playOnlineURL = $link['url'];
        return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
    }

    // if this is the first Parchment-capable link, and it's not compressed,
    // note it so that we can set up a Parchment play link to it
    if (in_array($link['fmtexternid'], [
        'zcode',
        'blorb/zcode',
        'glulx',
        'blorb/glulx',
        'tads2',
        'tads3',
        'hugo']))
    {
        $parchment_prefix = "https://iplayif.com/?story=";
        if (!$link['compression']) {
            $onlineInterpreterType = "Parchment";
            $playOnlineURL = $parchment_prefix . urlencode(urlToMirror($link['url']));
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        } else if ($unboxUrl) {
            $onlineInterpreterType = "Parchment";
            $playOnlineURL = $parchment_prefix . urlencode($unboxUrl);
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        }
    }

    if (in_array($link['fmtexternid'], [
        'adrift',
        'adrift38',
        'adrift39',
        'adrift5',
        'adrift5/blorb']))
    {
        if (!$link['compression']) {
            $onlineInterpreterType = "ADRIFT";
            if (preg_match('!^https?://www.adrift.co/cgi/download.cgi\?(\d+)!', $link['url'], $matches)) {
                // download.cgi does a 302 redirect to the real download URL, which play.adrift.co can't cope with
                // luckily, play.cgi does a 302 redirect to play.adrift.co with the canonical game URL
                $playOnlineURL = "https://www.adrift.co/cgi/play.cgi?" . $matches[1];
            } else {
                $playOnlineURL = "https://play.adrift.co/?game=" . urlencode($link['url']);
            }
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        } else if ($unboxUrl) {
            $onlineInterpreterType = "ADRIFT";
            $playOnlineURL = "https://play.adrift.co/?game=" . urlencode($unboxUrl);
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        }
    }
    return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
}

// Get a URL for the main Play Online button
$foundGame = false;
$playOnlineInterpreterType = "";
$primaryPlayOnlineURL = "";
foreach ($links as $link) {
    [$isGameLink, $onlineInterpreterType, $playOnlineURL] = constructPlayOnlineURL($link);
    if ($isGameLink) {
        $foundGame = true;
        if ($onlineInterpreterType && $playOnlineURL) {
            $playOnlineInterpreterType = $onlineInterpreterType;
            $primaryPlayOnlineURL = $playOnlineURL;
            break;
        }
    }
 }   

//----------------End play online link stuff-----------------------

// User filter ordering - if we're logged in, sort by any user filter
// (promotions and demotions) in effect.
$orderByUserFilter = 'null';
if ($curuser) {
    $orderByUserFilter = "(case ifnull(userfilters.filtertype, '*') "
                         . "when 'P' then 1 "
                         . "when 'D' then 3 "
                         . "else 2 end)";
}

// check for an RSS feed request
if (!$errMsg && isset($_REQUEST['rss'])) {

    // get the feed type
    if (isset($_REQUEST['reviews']))
        $feedType = GAME_RSS_REVIEWS;
    else if (isset($_REQUEST['downloads']))
        $feedType = GAME_RSS_DLS;
    else
        $feedType = GAME_RSS_ALL;

    // get the RSS item list
    $items = getGameRssItems($db, $id, $feedType, $title, $links, false);

    // send it
    if ($feedType == GAME_RSS_ALL) {
        sendRSS("$title - IFDB Updates",
                get_root_url() . "viewgame?id=$id",
                "Updates to <i>$title</i>'s IFDB page",
                $items, 50);
    } else if ($feedType == GAME_RSS_DLS) {
        sendRSS("$title - File Updates on IFDB",
                get_root_url() . "viewgame?id=$id",
                "IFDB File Updates for <i>$title</i>",
                $items, 50);
    } else if ($feedType == GAME_RSS_REVIEWS) {
        sendRSS("$title - IFDB Reviews",
                get_root_url() . "viewgame?id=$id&reviews",
                "IFDB Member Reviews of <i>$title</i>",
                $items, 50);
    }

    // done
    exit();
}

//------------- BEGIN VIEWGAME API SECTION ---------------

include "viewgame-components/viewgame-api.php";

//-------------- end of viewgame api section---------------

// start the page
$extraHead = scriptSrc('/viewgame.js', true);
if ($should_hide) {
    $extraHead .= "<meta name=\"robots\" content=\"noindex\">";
}

if (!$errCode) {
    // add Open Graph elements
    $extraHead .= "<meta property=\"og:site_name\" content=\"IFDB\" />";
    $extraHead .= "<meta property=\"og:type\" content=\"website\" />";
    $extraHead .= "<meta property=\"og:url\" content=\"";
    $extraHead .= get_root_url() . "viewgame?id=$id\" />";
    $extraHead .= "<meta property=\"og:title\" content=\"".strip_tags($title)."\" />";
    if(!isEmpty($desc)) {
        $extraHead .= "<meta property=\"og:description\" content=\"".strip_tags($desc)."\" />";
    }
    if ($hasart) {
        $extraHead .= "<meta property=\"og:image\" content=\"";
        $extraHead .= get_root_url() . "coverart?id=$id&amp;version=$pagevsn\"/>";
    }

    $extraHead .= "<link rel=\"canonical\" href=\"";
    $extraHead .= get_root_url() . "viewgame?id=$id\" />";
}

global $nonce;
$extraHead .= "
<script type=\"text/javascript\" nonce=\"$nonce\">
function checkReadMoreSections() {
    const windowHeight = window.outerHeight ?
        Math.min(window.innerHeight, window.outerHeight)
        : window.innerHeight;
    document.querySelectorAll('.readMore').forEach(section => {
        const expand = section.querySelector('.expand');
        if (!section.style.maxHeight && section.scrollHeight > windowHeight * 0.8) {
            expand.style.display = 'block';
        } else {
            expand.style.display = '';
        }
    })
}

addEventListener('resize', checkReadMoreSections);

addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.readMore').forEach(section => {
        const expand = section.querySelector('.expand');
        const button = expand.querySelector('button');
        button.addEventListener('click', () => {
            expand.style.display = '';
            section.style.maxHeight = section.scrollHeight + 'px';
            section.addEventListener('transitionend', () => {
                section.style.maxHeight = 'max-content';
            });
        });
    });
    checkReadMoreSections();
})
</script>
";

pageHeader("$title - Details", false, false,
           $extraHead, true);
initReviewVote();

// check for a game specified by IFID and not found
if (is_null(getID()) && get_req_data('ifid') != "") {

    // check for a title in the request; if it's there, try searching for
    // matches based on the title
    $title = get_req_data('title');
    if ($title != "") {
        $qtitle = mysql_real_escape_string($title, $db);
        $result = mysql_query(
            "select
                id, title, author from games
             where
                title like '$qtitle'
                or match (title) against ('$qtitle' in boolean mode)
             order by
                if (title like '$qtitle', 0, 1),
                match (title) against ('$qtitle' in boolean mode) desc
             limit 0, 3", $db);
        $titleSearch = mysqli_fetch_all($result, MYSQL_ASSOC);
    }

    ?>

    <h1>This IFID is not in the database</h1>

    <p>IFDB doesn't have a listing matching the <?php
echo helpWinLink("help-ifid", "IFID");
    ?>
    "<?php echo htmlspecialcharx(get_req_data('ifid')) ?>."  This
    could mean one of several things:

    <ul class=doublespace>
       <li><b>The game is listed in the database, but this IFID hasn't
       been entered for it yet.</b>
       <?php
           if (count($titleSearch) != 0) {
               echo "Here";
               if (count($titleSearch) == 1)
                   echo "'s a possible match";
               else
                   echo " are some possible matches";
               echo " based on the title:<ul>";
               foreach ($titleSearch as $t) {
                   $sid = $t['id'];
                   $stitle = htmlspecialcharx($t['title']);
                   $sauthor = htmlspecialcharx($t['author']);
                   echo "<li><a href=\"viewgame?id=$sid\">$stitle</a>, "
                       . "by $sauthor";
               }
               echo "</ul>If ";
               if (count($titleSearch) == 1)
                   echo "this isn't";
               else
                   echo "none of these are";
               echo " the game you're looking for, you can try a "
                   . "<a href=\"search\">full search</a> ";
           } else {
               echo "You can try <a href=\"search\">"
                   . "searching for the game</a> ";
           }
       ?>
       by title or author to see if it's listed.

       <p>If you do find an existing listing,
       you can help us improve IFDB by editing the listing and adding
       the missing IFID - just click "Edit this page" at the bottom of
       the game's page.

       <li><b>The game isn't listed yet.</b>  If you search for it and can't
       find it, it's probably not in the database.  You can help out
       by <a href="editgame?id=new">adding a new listing</a> for the game.
       (You don't have to be the game's author to do this - anyone can
       add a listing.)

       <li><b>The IFID might have been entered incorrectly.</b>  If you entered
       the IFID by hand, please double-check that it's correct.
    </ul>

    <?php
} else if ($errMsg) {
    echo "<font color=red><b>Error: $errMsg</b></font>";
} else {

// ------------------ VARIANT PAGE VIEWS -------------------------
//
// We use this same PHP script to show multiple page views: we can
// show the main page, pages of member reviews, or an editing history.

    if (isset($_REQUEST['history'])) {
        // we're showing the history, so this counts as a version view,
        // even though the version we're showing is the current version
        $historyView = true;
    }
    if (isset($_REQUEST['reviews']) || isset($_REQUEST['ratings'])) {
        // we're viewing a page of member reviews
        $reviewView = true;

        // note whether we're including ratings that don't have reviews
        $ratingsView = isset($_REQUEST['ratings']) && !$should_hide;

        // get the page we're showing, defaulting to 1 if it's non-positive
        $reviewPage = get_req_data('pg');
        if ($reviewPage != 'all' && $reviewPage < 1)
            $reviewPage = 1;
    }
    if (isset($_REQUEST['review'])) {
        // we're viewing a single review
        $oneReviewView = true;
    }
    if (isset($_REQUEST['downloads'])) {
        // we're viewing the downloads
        $downloadsView = true;
    }
    if (isset($_REQUEST['findmore'])) {
        // we're showing the 'recommendations' view
        $recView = true;
    }

    // the default view mode is the Detail view (this is the game's
    // "home page" view)
    $detailView = !($historyView || $reviewView || $oneReviewView || $recView || $downloadsView);

    // in history view, use the default external review layout - we're
    // not showing the full normal view in this case, so the normal
    // layout preferences don't apply
    if ($historyView) {
        $offsiteMode = 'A';
    }

?>
<div id='viewgame-body'>
<?php
    // ------------------------ EXTERNAL LINKS -------------------------------
    if ($detailView || $historyView || $downloadsView) {

    if ($downloadsView) {
        echo "<p><a href=\"viewgame?id=$id\">Go to the "
            . "main page for this game</a>";
        echo "<div>";
    } else {
        echo '<div class="downloadfloat">';
    }
?>
    <div class="readMore">
    <section class="<?php if (!$downloadsView) echo "downloads"?>" id="externalLinks">
        <?php include "viewgame-components/external-links.php"?>

   <?php
   // ------------ end of the external links table -----------------

   //---------------"HAVE YOU PLAYED THIS GAME?" SIDEBAR -----------
   if (!$downloadsView) {
   ?>

        <?php include "viewgame-components/have-you-played.php"?>

<?php
    } // if (!$downloadsView)

    //-----------end of the "Have you played this game?" sidebar ----------

    } // if ($detailView || $historyView)

//------------------------- MAIN SUMMARY -------------------------

?>

<div class='viewgame__mainSummary'>
        <?php
            if ($should_hide) {
                ?><div class=restricted>Links to this page and its ratings have been restricted, due to violations of our <a href="/code-of-conduct">Code of Conduct</a>.</div><?php
            }
        ?>
         <p>
         <section id="viewgame__header" cellspacing=0 cellpadding=0 border=0>
               <?php
if ($hasart) {
    $arthref = "{$_SERVER['PHP_SELF']}?coverart&id=$id";
    if (isset($_REQUEST['version']))
        $arthref .= "&version=" . $_REQUEST['version'];
               ?>
           <div class=coverart>

              <a href="<?php echo $arthref ?>&ldesc">
                 <?php echo coverArtThumbnail($id, 175, isset($_REQUEST['version']) ? $_REQUEST['version'] : $pagevsn); ?>
              </a>
           </div>
               <?php
} // if ($hasart)
               ?>

           <div>
              <h1><?php echo $title ?></h1>

              <b>by <?php

// build the list of authors - hyperlink each one in the list to a
// search for that author's name (using the "author:" search modifier)
$authorList = splitPersonalNameList($authorExt != "" ? $authorExt : $author);
$conj = "";
foreach ($authorList as $i => $au) {
    // get this author
    $au = $authorList[$i];

    // check for a profile link
    $proLink = "";
    while ($authorExt != ""
           && preg_match("/\s*\{([a-z0-9]+)\}/i", $au,
                         $match, PREG_OFFSET_CAPTURE, 0)) {

        // pull out this author profile TUID
        $pro = $match[1][0];

        // remove the matched text
        $au = substr_replace($au, "", $match[0][1], strlen($match[0][0]));

        // make sure the profile exists
        $qpro = mysql_real_escape_string($pro, $db);
        $result = mysql_query(
            "select id, name from users where id='$qpro'", $db);
        if (mysql_num_rows($result) != 0) {
            // build this profile link
            $hpro = urlencode($pro);
            $proName = htmlspecialcharx(mysql_result($result, 0, "name"));
            $proLink .= " </b><a class=authorProfileLink "
                        . "href=\"showuser?id=$hpro\" "
                        . "title=\"View $proName's profile\">profile</a><b>";
        }
    }

    // quote the author's name for display and use in the search HREF
    $uau = urlencode($au);
    $dau = htmlspecialcharx($au);

    // show the link
    echo "$conj<a href=\"search?searchfor=author%3A$uau\">$dau</a>$proLink";

    // figure the conjunction for the next in the list
    $conj = ($i + 2 == count($authorList) ? ($i == 0 ? " and " : ", and ") : ", ");
}
                  ?></b><br><br>
                  <div class=details>
                     <?php
if (!isEmpty($seriesname)) {
    if (isEmpty($seriesnum))
        echo "Part of ";
    else
        echo "Episode $seriesnum of ";
    echo "<a href=\"search?searchfor=series:" . urlencode($seriesname)
        . "\">".htmlspecialchars($seriesname)."</a><br>";
}
                     ?>
                     <?php if (!isEmpty($pubYear)) echo "$pubYear<br>" ?>
                     <?php
if (!isEmpty($genre)) {
    $genres = explode(",", str_replace("/", ",", $genre));
    echo join(", ", array_map(
        fn($genre) => "<a href=\"search?searchfor=genre:" . urlencode($genre) . "\">".htmlspecialchars($genre)."</a>",
        $genres)) . "<br>";
}
                     ?>
                     <?php if (!isEmpty($system)) echo htmlspecialchars($system)."<br>" ?>
                     <?php
                        $showExternalLinksAnchor = count($links) && ($detailView || $historyView);
                        if (!isEmpty($website) || $showExternalLinksAnchor) {
                            if (!isEmpty($website) && $showExternalLinksAnchor) {
                                if ($playOnlineButton) {
                                    echo "<div class=\"viewgame__externalLinksDiv\"><span class='viewgame__externalLinksAnchor'>$playOnlineButton | </span>"
                                        . "<a href=\"".htmlspecialcharx($website)."\">Web Site</a>"
                                        . "<span class='viewgame__externalLinksAnchor'> | <a href='#externalLinks'>External Links</a></span></div>";
                                } else {
                                    echo "<div class=\"viewgame__externalLinksDiv\"><a href=\"".htmlspecialcharx($website)."\">Web Site</a><span class='viewgame__externalLinksAnchor'> | <a href='#externalLinks'>External Links</a></span></div>";
                                }
                            } else if (!isEmpty($website)) {
                                echo "<div><a href=\"".htmlspecialcharx($website)."\">Web Site</a></div>";
                            } else {
                                if ($playOnlineButton) {
                                    echo "<div class='viewgame__externalLinksAnchor viewgame__externalLinksDiv'>$playOnlineButton | "
                                        . "<a href='#externalLinks'>External Links</a></div>";
                                } else {
                                    echo "<a class='viewgame__externalLinksAnchor viewgame__externalLinksDiv' href='#externalLinks'>External Links</a>";
                                }
                            }                        }
                     ?>
              </div>
           </div>
         </section>

         <?php


// ------------------- Query the reviews and recommendations ---------------
// We need to query these items for the Detail and Recommendation views.
//

    if ($detailView || $recView) {

        // Check for cross-recommendations.  There are two forms
        // of recommendation we generate: Recommend Lists that mention
        // this game, and other games that were highly rated by people
        // who rated this game highly.

        // look for lists containing this game
        $params = [$id];
        $sortMeLast = "";
        $sandbox = "not users.sandbox";
        if ($curuser) {
            if ($mysandbox != 0) $sandbox = "1";
            $sortMeLast = "if(reclists.userid = ?, 2, 1),";
            $params[] = $curuser;
        }
        $result = mysqli_execute_query($db,
            "select
                reclists.id as listid,
                reclists.title as title,
                reclists.`desc` as `desc`,
                users.id as userid,
                users.name as username
             from
                reclists
                join reclistitems
                join users
             where
                reclistitems.gameid = ?
                and reclists.id = reclistitems.listid
                and users.id = reclists.userid
                and $sandbox
             group by reclistitems.listid
             order by $sortMeLast rand()
             limit 0, 4", $params);

        // fetch the recommendation lists to show
        $lists = mysqli_fetch_all($result, MYSQL_ASSOC);

        // look for polls with votes for this game
        $params = [$id];
        $sortMeLast = "";
        $sandbox = "not uv.sandbox";
        if ($curuser) {
            if ($mysandbox != 0) $sandbox = "1";
            $sortMeLast = "if(v.userid = ? or p.userid = ?, 2, 1),";
            $params[] = $curuser;
            $params[] = $curuser;
        }
        $result = mysqli_execute_query($db,
            "select
               p.pollid as pollid,
               p.title as title,
               p.`desc` as `desc`,
               u.id as userid,
               u.name as username
             from
               polls as p
               join pollvotes as v on v.pollid = p.pollid
               join users as u on u.id = p.userid
               join users as uv on uv.id = v.userid
             where
               v.gameid = ?
               and $sandbox
             group by
               p.pollid
             order by
               $sortMeLast rand()
             limit
               0, 4", $params);

        // fetch the polls
        $polls = mysqli_fetch_all($result, MYSQL_ASSOC);

        $overloaded = 1;
        if (!$overloaded) {
            // Look for other games to recommend - these are games that
            // were given 4- or 5-star ratings by members who also gave
            // the current game a 4- or 5-star rating, AND which games
            // are unrated AND unplayed by the current user.
            //
            // If we're logged in, make sure the ratings are coming from
            // other users (don't bother generating recommendations based
            // on the current user's own ratings, for obvious reasons).
            // Also exclude games that are already on the current user's
            // play list or wish list - they obviously already know about
            // these games, so there's no reason to recommend them.
            if ($curuser && !$cssOverride) {
                $joinOtherUser = "";
                $andOtherUser = "and r1.userid != '$curuser'
                                and r2.userid != '$curuser'
                                and r2.gameid not in (
                                    select gameid from playedgames pg where pg.userid = '$curuser'
                                    union
                                    select gameid from wishlists wl where wl.userid = '$curuser'
                                    union
                                    select gameid from unwishlists uw where uw.userid = '$curuser'
                                )";
            } else {
                $joinOtherUser = "";
                $andOtherUser = "";
            }
            $result = mysql_query(
                "select
                games.id as id,
                games.title as title,
                games.author as author,
                games.`desc` as `desc`,
                (games.coverart is not null) as hasart
                from
                (games,
                reviews as r1,
                reviews as r2)
                $joinOtherUser
                where
                r1.gameid = '$qid'
                and r1.special is null and r2.special is null
                and r1.rating >= 4
                and r2.gameid != r1.gameid
                and r2.rating >= 4
                and r1.userid = r2.userid
                and games.id = r2.gameid
                and ifnull(now() >= r1.embargodate, 1)
                and ifnull(now() >= r2.embargodate, 1)
                and not (games.flags & " . FLAG_SHOULD_HIDE . ")
                $andOtherUser
                group by r2.gameid
                order by rand()
                limit 0, 3", $db);

            // fetch the cross-recommendations
            $crossrecs = mysqli_fetch_all($result, MYSQL_ASSOC);
        } else {
            $crossrecs = [];
        } 

        // add current-user exclusions for explicit cross-recs, if logged in
        if ($curuser && !$cssOverride) {
            $joinOtherUser = "left outer join playedgames as pg"
                             . "  on pg.userid = '$curuser'"
                             . "  and pg.gameid = c.togame"
                             . " left outer join wishlists as wl"
                             . "  on wl.userid = '$curuser'"
                             . "  and wl.gameid = c.togame"
                             . " left outer join unwishlists as uw"
                             . "  on uw.userid = '$curuser'"
                             . "  and uw.gameid = c.togame"
                             . " left outer join crossrecs as cmine "
                             . "  on cmine.fromgame = c.fromgame"
                             . "  and cmine.togame = c.togame"
                             . "  and cmine.userid = '$curuser'";
            $andOtherUser = "and cmine.togame is null"
                            . " and pg.userid is null"
                            . " and wl.userid is null"
                            . " and uw.userid is null";
        } else {
            $joinOtherUser = "";
            $andOtherUser = "";
        }

        // check for explicit cross-recommendations
        $sandbox = $mysandbox ? "1" : "not(u.sandbox) and not (u2.sandbox)";
        $result = mysql_query(
            "select
               c.togame as id,
               g.title as title,
               g.author as author,
               g.`desc` as `desc`,
               (g.coverart is not null) as hasart,
               g.pagevsn,
               c.notes as notes,
               (select count(*) from crossrecs as c2
                where c2.fromgame = '$qid' and c2.togame = c.togame)
                as votecount
             from
               crossrecs as c
               join games as g on g.id = c.togame
               join crossrecs as c2 on c2.togame = c.togame
               join users as u on c.userid = u.id
               join users as u2 on c2.userid = u2.id
               $joinOtherUser
             where
               c.fromgame = '$qid'
               and not (g.flags & " . FLAG_SHOULD_HIDE . ")
               and $sandbox
               $andOtherUser
             group by
               c.fromgame, c.togame
             order by
               rand()
             limit
               0, 3", $db);

        $ecrossrecs = mysqli_fetch_all($result, MYSQL_ASSOC);

        // if we have any cross-recommendations, limit the member
        // reviews to the top 3; otherwise, show up to 5 reviews
        $reviewsOnHomePage =
            (($lists || $polls || $crossrecs || $ecrossrecs) ? 3 : 5);
    }

// --------------------- GAME DETAILS -------------------------------

    // show the review summary if we're in Detail View mode
    if ($detailView) {
?>
         <p>
         <div class=details>
            <?php

$embargoCnt = 0;
if ($curuser) {
    $result = mysql_query(
        "select id, date_format(embargodate, '%M %e, %Y') from reviews
         where userid = '$curuser' and gameid = '$qid'
           and embargodate > now()", $db);
    $embargoCnt = mysql_num_rows($result);
    if ($embargoCnt > 0)
        list($embargoID, $embargoDate) = mysql_fetch_row($result);
}


// --------------------PHP Function for displaying median play time--------------------------



function displayMedianTime($rounded_median_time, $alltimes) {
    if ($rounded_median_time < 1) return;
    // Turn the total minutes into hours and minutes, and then text
    $official_estimated_time_text = convertTimeToText($rounded_median_time);
    echo "<details><summary>Estimated play time: ";
    echo $official_estimated_time_text;
    $s = (count($alltimes) === 1) ? "" : "s";
    echo " (based on " . count($alltimes) . " vote$s)</summary><br>";
    echo "Members voted for the following times for this game:";
    echo "<ul>";
    foreach ($alltimes as $t) {
        $time_vote_text = "<strong>" . convertTimeToText($t['time_in_minutes']) . "</strong>";
        $note = htmlspecialchars($t['time_note']);
        // For new time votes, add the note (if present) and link to the user's profile
        if ($note != "") {
            $time_vote_text .= ": \"$note\"";
        }
        $time_vote_text .= " — <a href='showuser?id={$t['userid']}'>{$t['name']}</a>";
        echo "<li>$time_vote_text</li>";
    }
    echo "</ul></details>";
}

//--------------------End of PHP Functions for displaying median time-----------------

if ($ratingCntTot == 0 && $memberReviewCnt == 0) {
    displayMedianTime($rounded_median_time, $alltimes);
    echo showStars(0, true) . " No reviews yet";
    if ($embargoCnt == 0)
        echo " - <a href=\"review?id=$id&userid=$curuser\">be the first</a>";
} else if ($ratingAvg == 0 && $memberReviewCnt == 0) {
    echo "<a href=\"viewgame?id=$id&ratings\" "
        . "title=\"View all ratings and reviews for this game\">"
        . "$ratingCntTot rating" . ($ratingCntTot != 1 ? "s" : "")
        . "</a><br>";
    displayMedianTime($rounded_median_time, $alltimes);
} else {
    if (!$should_hide && $ratingAvg != 0) {
        echo showStars($ratingAvg)
            . " (based on <a href=\"viewgame?id=$id&ratings\" "
            . "title=\"View all ratings and reviews for this game\">"
            . "$ratingCntAvg rating" . ($ratingCntAvg != 1 ? "s" : "")
            . "</a>)<br>";
    }

    displayMedianTime($rounded_median_time, $alltimes);

    if ($memberReviewCnt != 0) {
        $href = ($memberReviewCnt > $reviewsOnHomePage)
                ? "viewgame?id=$id&reviews" : "#memberReviews";
        echo "<a href=\"$href\">$memberReviewCnt review"
            . ($memberReviewCnt != 1 ? "s" : "")
            . "</a>";
    }
    else {
        echo "No reviews yet";
        if ($embargoCnt == 0)
            echo " - <a href=\"review?id=$id&userid=$curuser\">be the first</a>";
    }
}

if (!$should_hide) {
    $result = mysql_query(
        "select count(userid) from playedgames where gameid='$qid'", $db);
    list($playlistCnt) = mysql_fetch_row($result);

    $emdash = false;

    if ($playlistCnt) {
        $emdash = true;
        echo " &mdash; <a id=playlistCount href='whoselist?game=$id&type=playlist' class='silent'>";
        if ($playlistCnt == 1) {
            echo "1 member has";
        } else {
            echo "$playlistCnt members have";
        }
        echo " played this game.</a>";
    }

    $result = mysql_query(
        "select count(userid) from wishlists where gameid='$qid'", $db);
    list($wishlistCnt) = mysql_fetch_row($result);

    if ($wishlistCnt) {
        if (!$emdash) {
            echo " &mdash;";
        }
        echo " <a id=wishlistCount href='whoselist?game=$id&type=wishlist' class='silent'>It's on $wishlistCnt wishlist";
        if ($wishlistCnt != 1) {
            echo "s";
        }
        echo ".";
        echo "</a>";
    }
}

?>
<script type="text/javascript" nonce="<?php global $nonce; echo $nonce; ?>">
<!--
function updatePlaylistCount(n)
{
    if (n === null || n === undefined)
        return;
    document.getElementById("playlistCount").innerHTML =
        "" + (n == 0 ? "No" : n) + " member" + (n == 1 ? " has" : "s have")
        + " played this game.";
}
function updateWishlistCount(n)
{
    if (n === null || n === undefined)
        return;
    document.getElementById("wishlistCount").innerHTML =
        (n == 0 ? "It's not on any wish lists yet" :
         "It's on " + n + " wishlist" + (n == 1 ? "." : "s."));
}
</script>
<?php

if ($embargoCnt > 0)
    echo "<br><i>Your review of this game is hidden until $embargoDate - "
        . "<a href=\"review?id=$id&userid=$curuser\">Revise it</a></i>";

            ?>
         </div>

<?php

    } // if ($detailView)

    // show the description, if it's present AND we're in Detail or
    // History mode
    if (!isEmpty($desc) && ($detailView || $historyView)) {
?>
         <h3>About the Story</h3>
         <div class="readMore"><p><?php echo $desc ?></p>
            <div class="expand"><button>Read More</button></div>
        </div>
<?php
    }
?>
<?php
// ------------ end of the main page layout table -----------------
?>

</div>

<?php
    // ---------------- Awards Section ----------------------------
    if ($detailView) {

        // look up awards for this game
        $result = mysqli_execute_query($db,
            "select
               c.compid, c.title,
               d.divname,
               g.place
             from
               compgames as g
               join competitions as c on c.compid = g.compid
               join compdivs as d on d.divid = g.divid
             where
               g.gameid = ?
             order by
               lower(c.title), d.divno, lower(d.divname)", [$id]);

        // if we have any rows, show the awards section
        if (mysql_num_rows($result) > 0)
        {
            // start the section
            echo "<h2>Awards</h2><div class=hangindentedMore>";

            // display the award rows
            $lastComp = false;
            $awards = [];
            while ([$compID, $compTitle, $compDivName, $compPlace] =
                    mysql_fetch_row($result))
            {
                $compTitle = htmlspecialcharx($compTitle);
                $compDivName = htmlspecialcharx($compDivName);
                $compPlace = htmlspecialcharx($compPlace);

                // build the comp link
                $comp = "<a href=\"viewcomp?id=$compID\">$compTitle</a>";

                // if this is a new comp, flush the last one
                if ($comp != $lastComp)
                {
                    // display the last one
                    if ($lastComp)
                        echo "<p>" . awardList($awards) . " - $lastComp</p>";

                    // start the new one
                    $lastComp = $comp;
                    $awards = [];
                }

                // add this award to the list
                $awards[] = [$compPlace, $compDivName];
            }

            // flush the last award
            echo "<p>" . awardList($awards) . " - $lastComp</p>";

            // close the section
            echo "</div>";
        }
    }
?>

         <?php

    // if we're in History mode, show the page history
    if ($historyView) {

//----------------------- PAGE HISTORY SECTION ------------------------

    // show the page history

    // start off with the current version
    echo "<h2>Page Update History</h2><div class=indented>
            <table cellspacing=0 cellpadding=0 border=0>
            <tr valign=baseline><td>";

    // if we're showing the latest version, flag it
    if (!isset($_REQUEST['version']) || $_REQUEST['version'] == $pagevsn)
        echo "<img src=\"/img/blank.gif\" class=\"current-version-marker\">&nbsp;";

    echo "</td><td>
            <a href=\"viewgame?history&version=$pagevsn&id=$id\">
            v.$pagevsn: $moddatelatest</a> -
            <a href=\"showuser?id=$editedbyid\">$editedbyname</a>
            (Current Version)
            - <a href=\"editgame?id=$id\">Edit Page</a>";

    if ($adminPriv) {
        echo " - <a href=\"rollbackGameVersion?game=$id\">Delete Version</a>";
    }

    echo " - <a href=\"viewgame?id=$id\">Normal View</a>
          <br>";

    // query up the version history
    $result = mysql_query("select pagevsn, editedby, users.name editorname,
               date_format(moddate, '%d-%b-%Y %H:%i') moddate, deltas
            from games_history
              left outer join users on users.id = editedby
            where games_history.id = '$qid'
            order by pagevsn desc", $db);
    $rowcnt = mysql_num_rows($result);
    while ([$ivsn, $ieditor, $ieditorname, $idate, $deltas] =
            mysql_fetch_row($result)) {
        // make the user name safe for display
        $ieditorname = htmlspecialcharx($ieditorname);

        // set up the linked user name
        if ($ieditor)
            $iedlink = "<a href=\"showuser?id=$ieditor\">$ieditorname</a>";
        else
            $iedlink = "IFDB";

        // deserialize the deltas
        $deltas = unserialize($deltas);

        // get the description of the changes
        $changeList = getDeltaDesc($deltas);

        // show which columns changed in the *next* version - each
        // history record saves the old values for the columns edited
        // in the *following* version
        if ($changeList) {
            echo "<div class=indented><span class=details>"
                . "<i>Changed $changeList</i></span></div>";
        }

        // start the new row
        echo "</td></tr><tr valign=baseline><td>";

        // if this is the active version, highlight it
        if (isset($_REQUEST['version']) && $ivsn == $_REQUEST['version'])
            echo "<img src=\"/img/blank.gif\" class=\"current-version-marker\">&nbsp;";

        // show this version entry
        echo "</td><td><a href=\"viewgame?version=$ivsn&id=$id\">
           v.$ivsn: {$idate}</a> - $iedlink<br>";
    }

    // the last version we show is always the first version
    echo "<div class=indented><span class=details>
        <i>Created page</i></span></div>";

    // end the history table and division
    echo "</td></tr></table></div>";

    } // if ($historyView)


    // -------------------------- DETAIL VIEW ------------------------------
    //
    if ($detailView) {

        // show other (non-editorial) special reviews
        $result = mysql_query(
            "select reviews.id as reviewid,
               rating, summary, review,
               date_format(moddate, '%M %e, %Y') as moddate,
               specialreviewers.id as special,
               specialreviewers.name as specialname,
               users.id as userid, users.name as username, location
             from reviews, specialreviewers, users
             where gameid = '$qid'
               and reviews.special = specialreviewers.id
               and users.id = reviews.userid
               and editorial = 0
               and ifnull(now() >= reviews.embargodate, 1)
             order by displayrank", $db);

        if (mysql_num_rows($result) != 0) {

            // start an indented section if we haven't already
            if (!$divStarted) {
                echo "<div class=indented>";
                $divStarted = true;
            }

            // show the reviews
            while ($row = mysql_fetch_array($result, MYSQL_ASSOC))
                showReview($db, $id, $row,
                           $specialNames, SHOWREVIEW_COLLAPSELONG | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));
        }

        // end the indented division if we started one
        if ($divStarted)
            echo "</div>";


//----------------------- MEMBER REVIEW SECTION ------------------------

        // query up the member reviews, sorted by helpfulness - for ordering
        // purposes, helpfulness is defined as helpful votes minus unhelpful
        // votes; this way, each unhelpful vote essentially cancels out a
        // helpful vote
        $result = mysql_query(
            $selectMemberReviews
            . " order by $orderByUserFilter, "
            . " netHelpful desc, publicationdate desc, reviews.createdate desc", $db);

        $rowcnt = mysql_num_rows($result);
        if ($rowcnt > 0) {

            // we have some reviews - start off the section
            $showcnt = $rowcnt;

            // show the Member Reviews section header
            $showHisto = !$should_hide;
            showMemberReviewsHeader($showHisto);

            // if we have too many for this front page, limit it
            if ($rowcnt > $reviewsOnHomePage) {
                echo "<h3>$reviewsOnHomePage Most Helpful Member Reviews</h3>";
                $showcnt = $reviewsOnHomePage;
            }

            // show the top reviews
            foreach (range(1, $showcnt) as $i) {
                // fetch the review
                $reviewRec = mysql_fetch_array($result, MYSQL_ASSOC);

                // show it
                showReview($db, $id, $reviewRec, $specialNames, SHOWREVIEW_COLLAPSELONG | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));
            }

            // show the link to the full list of reviews, if there are more
            if ($rowcnt > $reviewsOnHomePage) {
                echo "<div class=details><a href=\"viewgame?id=$id&reviews\">
                      See All $memberReviewCnt Member Reviews</a></div><br>";
            }

            // end the indented division
            echo "</div>";
        }
    
    } // if ($detailView)

    //--------------------------- EDITORIAL REVIEWS ---------------------------

    // we haven't started a nested division yet (we may or may not,
    // depending on what parts we end up displaying)
    $divStarted = false;

    // If we're showing the Detail view, show the special reviews and
    // a few of the top-rated (most helpful) member reviews.  The Detail
    // View page can get too long if we show all reviews, so we only
    // show a few, with a link to see the rest.
    //
    // In history view mode, show just the external reviews, since these
    // are edited as part of the page history.
    if ($detailView || ($historyView && count($extReviews) != 0)) {

        // ---------- Show the editorial reviews ------------

        // start with an empty string for the off-site review section
        $osr = "";

        // fetch the non-external editor reviews
        $srevs = array();
        if ($detailView) {
            // fetch the editorial review list
            $result = mysqli_execute_query($db,
                "select
                   r.rating as rating, r.summary as headline,
                   r.review as summary, sr.name as specialname, sr.code as code,
                   sr.displayrank as displayrank,
                   null as sourcename, null as sourceurl, null as url,
                   r.userid as userid, u.name as username
                 from
                   reviews as r
                   join specialreviewers as sr on sr.id = r.special
                   left outer join users as u on u.id = r.userid
                 where
                   r.gameid = ?
                   and sr.editorial != 0
                   and sr.code <> 'external'
                   and ifnull(now() >= r.embargodate, 1)
                 order by
                   sr.displayrank", [$id]);

            // collect the reviews
            $srevs = mysqli_fetch_all($result, MYSQL_ASSOC);
        }

        // merge the external reviews
        if ($extReviews) {
            // find the sorting position for the externals
            for ($i = 0 ; $i < count($srevs) ; $i++) {
                if ($srevs[$i]['displayrank'] > $extRevDisplayRank)
                    break;
            }

            // merge the arrays
            array_splice($srevs, $i, 0, $extReviews);
        }

        // see what we have
        if (count($srevs) != 0) {
            foreach ($srevs as $srev) {
                // get this row
                $rating = $srev['rating'];
                $headline = htmlspecialcharx($srev['headline']);
                $review = $srev['summary'];
                $specialname = $srev['specialname'];
                $code = $srev['code'];
                $xsrc = htmlspecialcharx($srev['sourcename']);
                $xsrcurl = $srev['sourceurl'];
                $xurl = $srev['url'];

                $stars = showStars($rating);

                $showBody = false;

                // clear out the buffer for building this row
                $txt = "";

                // show the review heading - this varies by review type
                if ($code == 'bafs' && $detailView) {

                    // Baf's Guide
                    $showBody = true;
                    $txt .= "<h3><a href=\"https://web.archive.org/web/20110100000000/https://www.wurb.com/if";
                    if (!isEmpty($bafsid))
                        $txt .= "/game/$bafsid";
                    $txt .= "\" title=\"Go to Baf's Guide to the IF Archive\">"
                            . "$specialname</a></h3>"
                            . "<div class=smallhead>$stars<br></div><p>";

                } else if ($code == 'external') {

                    // External review link

                    if ($stars && $headline)
                        $stars .= " ";

                    // generate the link to the source site
                    if ($xsrcurl)
                        $xlink = "<span class=xsrc>"
                                 . "<a href=\"$xsrcurl\">$xsrc</a>"
                                 . "</span>";
                    else
                        $xlink = "<span class=xsrc>$xsrc</span>";

                    if ($offsiteMode == 'L') {
                        // links-only mode

                        // start a new paragraph with the link
                        $txt .= "<a href=\"$xurl\">";

                        // if we have a rating or a headline, use that as
                        // the link to the off-site review; otherwise
                        // synthesize a title for the link
                        if ($stars && $headline)
                            $txt .= "$stars<b>$headline</b></a> - ";
                        else if ($stars)
                            $txt .= "$stars</a> <a href=\"$xurl\">Review</a>"
                                    . " at ";
                        else if ($headline)
                            $txt .= "$headline</a> - ";
                        else
                            $txt .= "A review</a> at ";

                        // add the site link
                        $txt .= "$xlink<br>";

                        // omit the body in this view
                        $showBody = false;

                    } else {
                        // full mode - include the headline and summary

                        // start the paragraph with the link to the main site
                        $txt .= "<p>$xlink<br>";

                        // if there's a rating or headline, it goes next
                        if ($stars || $headline)
                            $txt .= "$stars<b>$headline</b><br>";

                        // and we'll want to add the summary as the body
                        $showBody = true;
                    }

                    // show the body, unless we're in "links only" mode
                    // for external reviews
                    $showBody = ($offsiteMode != 'L');

                } else if ($detailView) {

                    // any other special review
                    $showBody = true;
                    $txt .= "<h3>$specialname</h3>"
                            . "<div class=smallhead>$stars<br></div>";

                }

                // show the review body if applicable
                if ($showBody)
                    $txt .= fixDesc($review, FixDescSpoiler);

                // for an external review, show the full-review link
                if ($code == 'external' && $offsiteMode != 'L') {
                    $txt .= "<br><span class=details><a href=\"$xurl\">"
                            . "See the full review</a></span>";
                }

                // If this is an external review, and we're showing
                // external reviews separately after the member review
                // section, add this to the string we're accumulating
                // for later display.
                if ($code == 'external' && $offsiteMode != 'A') {
                    // don't show now - accumulate for later
                    $osr .= $txt;
                } else {
                    // this is for immediate display
                    if (!$divStarted) {
                        if (count($srevs) === 1)
                            echo "<h2>1 Off-Site Review</h2>";
                        else
                            echo "<h2>".count($srevs)." Off-Site Reviews</h2>";

                        echo "<div class='indented readMore'>";
                        $divStarted = true;
                    }

                    echo $txt;
                }
            }
        }
    }

    if ($divStarted) {
        echo "<div class=expand><button>Read More</button></div>";
        echo "</div>";
    }

        // ---------------- News Section ----------------------------

        // if there's news, and we're in the detail view, show the news
        //
    if ($detailView) {
        newsSummary($db, "G", $qid, 3,
                    "<h2>News</h2><div class=indented>",
                    "</div>");

        // --------------- end News section ----------------

        //--------------------------- TAGS SECTION -----------------------------

        include "viewgame-components/tags.php";

        //------------------------- end of the tags section-------------------------------

    } // if ($detailView)

    //---------------------------GAME DETAILS SECTION-----------------------
    // show the Game Details if we're in Detail or History view modes

    if ($detailView || $historyView) {
        include "viewgame-components/game-details.php";

    // ---------------- end Game Details section ------------

    } // if ($detailView)


//------------------------ CROSS-RECOMMENDATIONS --------------------------
//
// Show recommendations in the Detail and Recommendations views.
//
// If we have any recommended lists mentioning the game, or any
// cross-recommendations for games, list them
    if ($detailView || $recView) {
        include "viewgame-components/cross-recommendations.php";
    } // if ($detailView || $recView)

//-------------------- end of cross-recommendations --------------------------

//------------------ OFF-SITE REVIEWS ("BELOW" MODE) ---------------------
//
// Off-site reviews, if the preferences are set to 'B' (show below
// member reviews) or 'L' (show links only below member reviews)
    if ($detailView && $osr && ($offsiteMode == 'B' || $offsiteMode == 'L')) {

        echo "<h2>Off-Site Reviews</h2>"
            . "<div class=indented>$osr</div>";

    } // if (off-site "below" mode)


//-------------------------- RSS FEEDS ---------------------------

    if ($detailView) {

?>

<h2>RSS Feeds</h2>
<a class="rss-icon" href="viewgame?id=<?php echo $id ?>&reviews&rss">
    New member reviews</a>
<br><a class="rss-icon" href="viewgame?id=<?php echo $id ?>&downloads&rss">
    Updates to external links</a>
<br><a class="rss-icon" href="viewgame?id=<?php echo $id ?>&news&rss">
    All updates to this page</a>

<?php

    }

//-------------------------- DETAIL VIEW FOOTER ---------------------------
    if ($detailView) {

        // if this is our page, and we own all the versions, offer
        // deletion
        $deletePageLink = "- <a href=\"delgame?id=$id\">Delete This Page</a>";

        // add the footer showing the version/edit links
        $editedby =
            ($editedbyname
             ? ("edited by <a href=\"showuser?id=$editedbyid\">"
                . "$editedbyname</a>")
             : "last edited");
        echo "<br clear=all><br>
           <hr class=dots>
           <span class=notes>
              <i>This is version $pagevsn of this page, $editedby
                 on $moddate.</i>
              - <a href=\"viewgame?history&id=$id\">View Update History</a>
              - <a href=\"editgame?&id=$id\">Edit This Page</a>
              - <a href=\"editnews?type=G&source=$id\">Add a News Item</a>
              $deletePageLink
           </span>";

    } // if ($detailView)

//----------------------------- ONE-REVIEW VIEW ---------------------------

    // if we're showing a single review, show it
    if ($oneReviewView) {

        // make it easy to return to the overview page
        echo "<br><span class=notes><a href=\"viewgame?id=$id\">Go to the
            game's main page</a></span><br>";

        // query the review by ID
        $reviewID = get_req_data('review');
        $result = mysql_query(
            getReviewQueryByReview($db, $reviewID), $db);

        // fetch the review
        $reviewRec = mysql_fetch_array($result, MYSQL_ASSOC);
        $reviewAuthor = $reviewRec['userid'];

        if (mysql_num_rows($result) == 0) {
            echo "The requested review does not exist.";
        } else {

            // start the section
            showMemberReviewsHeader(false);

            // Show our single review.  Only show the "Add Comment"
            // button for the comment controls, since we're going to
            // list the comments below and thus don't need the control
            // to show more of them.
            showReview($db, $id, $reviewRec, $specialNames,
                       SHOWREVIEW_COMMENTCTLSADDONLY | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));

            // end the nested division that the header opens
            echo "</div>";

            // show the comments
            $qReviewID = mysql_real_escape_string($reviewID, $db);
            showCommentPage($db, $reviewAuthor, $qReviewID, "R",
                            "viewgame?id=$id&review=$reviewID",
                            "reviewcomment?review=$reviewID",
                            25, "Comments on this review", "comments");
        }

    }

//--------------------------- SEE-ALL-REVIEWS VIEW -------------------------

    // if we're showing the Review View, show 10 member reviews
    if ($reviewView) {

        // number per page
        $per_page = ($ratingsView ? 25 : 10);
        $pgAll = false;

        $limit = "";
        if ($reviewPage == 'all') {
            $pgAll = true;
            $reviewPage = 1;
        } else {
            $reviewPage = (int)$reviewPage;
        }

        // calculate the row number of the first review on the page
        $firstOnPage = ($reviewPage - 1) * $per_page;

        // figure the page limits, if not viewing all
        if (!$pgAll)
            $limit = "limit $firstOnPage, $per_page";

        // sorting option mapping - "sortby" <select> list to ORDER BY clause
        $orderByMap = array(
            'new' => array('publicationdate desc', 'Newest First'),
            'old' => array('publicationdate', 'Oldest First'),
            'hlp' => array('netHelpful desc', 'Most Helpful First'),
            'unh' => array('netHelpful', 'Least Helpful First'),
            'hi' => array('rating desc', 'Highest Ratings First'),
            'lo' => array('rating', 'Lowest Ratings First'));

        // build the query that gives us the right sorting order
        $sortReq = get_req_data('sortby');
        $orderBy = isset($orderByMap[$sortReq])
                   ? $orderByMap[$sortReq][0] : "publicationdate desc";

        // if it's a helpfulness query, apply the user filter ordering
        if ($sortReq == 'hlp')
            $orderBy = "$orderByUserFilter, $orderBy";
        else if ($sortReq == 'unh')
            $orderBy = "$orderByUserFilter desc, $orderBy";

        // pick the appropriate base query
        $query = ($ratingsView ? $selectMemberRatings : $selectMemberReviews);

        // run the query
        $result = mysql_query(
            "$query order by $orderBy, moddate desc $limit", $db);

        // get the query total - it might differ from the overall total
        // due to muting or other filters
        $realtotcnt = ($ratingsView ? $ratingCntTot : $memberReviewCnt);
        $result2 = mysql_query("select found_rows()", $db);
        list($totcnt) = mysql_fetch_row($result2);

        // if viewing all, make the page limit equal to the actual count
        if ($pgAll)
            $per_page = $totcnt;

        // figure the number of pages that gives us
        $lastPage = (int)floor(($totcnt + $per_page - 1)/$per_page);
        if ($reviewPage > $lastPage)
            $reviewPage = $lastPage;

        // calculate the last on the page
        $lastOnPage = $firstOnPage + $per_page - 1;
        if ($lastOnPage > $totcnt - 1)
            $lastOnPage = $totcnt - 1;

        // make it easy to return to the overview page
        echo "<br><span class=notes><a href=\"viewgame?id=$id\">Return to the
            game's main page</a></span><br>";

        $showHisto = !$should_hide;

        // start the section
        showMemberReviewsHeader($showHisto);

        // show the reviews/ratings only if we have any
        if ($totcnt != 0) {

            // show the sorting controls
            showSortingControls("reviewOrder", "sortby", $orderByMap, $sortReq,
                                array("id" => $id, "reviews" => "1",
                                      "ratings" => $ratingsView),
                                "viewgame");

            // generate the page navigation controls
            $pageCtl = "<span class=details>"
                       . makePageControl(
                           "viewgame?id=$id&reviews&sortby=$sortReq"
                           . ($ratingsView ? "&ratings" : ""),
                           $reviewPage, $lastPage,
                           $firstOnPage, $lastOnPage, $totcnt,
                           $totcnt > 20, true, $pgAll)
                       . "</span>";

            // show the page controls at the top of the review list
            echo "$pageCtl<br><br><br>";

            // now show the reviews
            for ($i = $firstOnPage ; $i <= $lastOnPage ; $i++) {
                showReview($db, $id, mysql_fetch_array($result, MYSQL_ASSOC),
                           $specialNames, 0 | ($adminPriv ? SHOWREVIEW_ADMINREVIEWVOTESLINK : 0));
            }

            // show the page controls again at the bottom of the review list
            echo "<br>$pageCtl<span class=details> | "
                . "<a href=\"viewgame?id=$id\">Return to game's main page"
                . "</a></span><br><br>";
        }

        // end the indented division started in the review header
        echo "</div>";

    } // if ($reviewView)

    echo "</div>"; // viewgame-body
} // if $(errMsg)

pageFooter();

?>
